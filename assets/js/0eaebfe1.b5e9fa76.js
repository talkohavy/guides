"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4134],{2430:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var s=n(5893),i=n(1151);const a={sidebar_label:"Design Patterns",sidebar_position:2},o="Design Patterns",r={id:"programming/design-patterns",title:"Design Patterns",description:"1. Strategy Pattern",source:"@site/docs/programming/design-patterns.md",sourceDirName:"programming",slug:"/programming/design-patterns",permalink:"/guides/docs/programming/design-patterns",draft:!1,unlisted:!1,editUrl:"https://github.com/talkohavy/guides/docs/programming/design-patterns.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Design Patterns",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Kubernetes",permalink:"/guides/docs/programming/kubernetes"},next:{title:"Git",permalink:"/guides/docs/programming/git"}},h={},l=[{value:"<strong>1. Strategy Pattern</strong>",id:"1-strategy-pattern",level:2},{value:"- A. The Strategy Pattern&#39;s Goal",id:"--a-the-strategy-patterns-goal",level:3},{value:"- B. Formal Definition",id:"--b-formal-definition",level:3},{value:"- C. The Problem At Hand",id:"--c-the-problem-at-hand",level:3},{value:"- D. The Solution: Composition",id:"--d-the-solution-composition",level:3},{value:"- E. Dependency Injection",id:"--e-dependency-injection",level:3},{value:"<strong>2. Observer Pattern</strong>",id:"2-observer-pattern",level:2},{value:"- A. Definition",id:"--a-definition",level:3},{value:"- B. Push v.s. Pull",id:"--b-push-vs-pull",level:3},{value:"- C. The Pull Method",id:"--c-the-pull-method",level:3},{value:"- D. We need to Register",id:"--d-we-need-to-register",level:3},{value:"- E. Variations of the Observer Pattern",id:"--e-variations-of-the-observer-pattern",level:3},{value:"<strong>3. Decorator Pattern</strong>",id:"3-decorator-pattern",level:2},{value:"- Definition",id:"--definition",level:2},{value:"- Simple Explanation",id:"--simple-explanation",level:2},{value:"<strong>4. Factory Pattern</strong>",id:"4-factory-pattern",level:2},{value:"A. Factory Method Pattern",id:"a-factory-method-pattern",level:2},{value:"B. Abstract Factory Pattern",id:"b-abstract-factory-pattern",level:2},{value:"<strong>5. Singleton Pattern</strong>",id:"5-singleton-pattern",level:2},{value:"A. Formal Definition",id:"a-formal-definition",level:3},{value:"B. Simple Explanation",id:"b-simple-explanation",level:3},{value:"C. Reasons Why You should Never Use It",id:"c-reasons-why-you-should-never-use-it",level:3},{value:"D. How to implement a singleton pattern",id:"d-how-to-implement-a-singleton-pattern",level:3},{value:"<strong>6. Action Pattern</strong>",id:"6-action-pattern",level:2},{value:"A. Description",id:"a-description",level:3},{value:"B. More Details",id:"b-more-details",level:3},{value:"<strong>999. Bridge Pattern</strong>",id:"999-bridge-pattern",level:2},{value:"A. What is the Goal of the Bridge Pattern?",id:"a-what-is-the-goal-of-the-bridge-pattern",level:3},{value:"B. The interface segregation principle",id:"b-the-interface-segregation-principle",level:3}];function c(e){const t={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"design-patterns",children:"Design Patterns"}),"\n",(0,s.jsx)(t.h2,{id:"1-strategy-pattern",children:(0,s.jsx)(t.strong,{children:"1. Strategy Pattern"})}),"\n",(0,s.jsx)(t.h3,{id:"--a-the-strategy-patterns-goal",children:"- A. The Strategy Pattern's Goal"}),"\n",(0,s.jsxs)(t.p,{children:["What is the Goal of the Strategy Pattern?",(0,s.jsx)(t.br,{}),"\n","This is probably the simplest pattern.",(0,s.jsx)(t.br,{}),"\n","In short, it is about using composition instead of using inheritance.",(0,s.jsx)(t.br,{}),"\n","It's about understanding that inheritance is NOT intended for code reuse."]}),"\n",(0,s.jsx)(t.h3,{id:"--b-formal-definition",children:"- B. Formal Definition"}),"\n",(0,s.jsxs)(t.p,{children:["The strategy pattern defined a family of algorithms, encapsulates each one, and makes them interchangeable.",(0,s.jsx)(t.br,{}),"\n","Strategy lets the algorithm vary independently from clients that use it."]}),"\n",(0,s.jsx)(t.h3,{id:"--c-the-problem-at-hand",children:"- C. The Problem At Hand"}),"\n",(0,s.jsxs)(t.p,{children:["The problem at hand is us having Objects with some shared traits, where each trait can either be exactly the same, or just conceptually the same but with a different implementation.",(0,s.jsx)(t.br,{}),"\n","Also, each object can have more traits than those common ones."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:(0,s.jsx)("font",{size:"4",children:"Question: Why not inheritance?"})})})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:(0,s.jsx)("font",{size:"4",children:"Answer:"})})}),"  The old solution back in the day, when Object Oriented was a huge hype, was with inheritance.",(0,s.jsx)(t.br,{}),"\n","What is inheritance in a nutshell?",(0,s.jsx)(t.br,{}),"\n","Consider a Duck class. The Duck class is a super class. The intention is that other classes should inherit from it.",(0,s.jsx)(t.br,{}),"\n","Duck has 3 methods on it:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"quack"}),"\n",(0,s.jsx)(t.li,{children:"display"}),"\n",(0,s.jsx)(t.li,{children:"fly"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Let's now consider 2 sub-classes: WildDuck & CityDuck.",(0,s.jsx)(t.br,{}),"\n","In UML, we have 2 types of arrows:",(0,s.jsx)(t.br,{}),"\n","is-a === ---D  (this is an inheritance arrow)",(0,s.jsx)(t.br,{}),"\n","has-a === ---\x3e   (this is a composition arrow)",(0,s.jsx)(t.br,{}),"\n",'In other words: "A wild duck IS a Duck". "A city duck IS a Duck".',(0,s.jsx)(t.br,{}),"\n",'The sub-classes of Duck are in charge of implementing their own version of the "display" method. And thus, wild ducks can be displayed differently than city ducks.']}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:(0,s.jsx)("font",{size:"6",children:"The problems with inheritance"})})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)("font",{size:"5",children:(0,s.jsx)(t.em,{children:"-- Downside 1: Not Resilient to Change"})})}),(0,s.jsx)(t.br,{}),"\n",'The main problem with it is that sub-classes must inherit ALL of the methods of the parent class, even when it\'s not logical.\nWe said that Duck has a "fly" method.\nNow consider a new sub-class which is called RubberDuck.\nRubber ducks can\'t fly, but CityDuck & WildDuck can.\nIf we were to put the "fly" method on Duck, then RubberDuck would have to inherit it, and implement it. Even if it\'s not logical.\nSo yeah, we could think about this things ahead of time, and design properly, but consider a case where this "fly" method is some change that was offered by our product team later on.\nThis change would break our entire code structure of how we think about Duck.\nSo we are already seeing that inheritance isn\'t great with changes.\nThere IS an ugly solution for this is to force RubberDuck to also implement the "fly" method, and just have it do nothing.']}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:(0,s.jsx)("font",{size:"5",children:(0,s.jsx)(t.em,{children:"-- Downside 2: Code duplication"})})})}),"\n",(0,s.jsxs)(t.p,{children:["Horizontal inheritance is not possible. Consider a case where we add 2 new sub-classes (to the already existing sub-classes!): DuckA & DuckB",(0,s.jsx)(t.br,{}),"\n",'Where they both have a "fly" method, which is exactly the same implementation! The "fly" over at Duck is really just the basic definition, so it can\'t be positioned there. We would need to duplicate the code twice on each of the two classes.',(0,s.jsx)(t.br,{}),"\n","The ugly, and extremely not feasible solution to this is, we can say that those two classes inherit from let's say a class called FlyingWithTypeA, but you can already see that it's starting to get ",(0,s.jsx)("font",{size:"5",children:(0,s.jsx)(t.em,{children:(0,s.jsx)(t.strong,{children:"really"})})})," complicated.",(0,s.jsx)(t.br,{}),"\n",'Because consider a case where DuckA & DuckB both has an "eat" method, which are different in implementation, but then DuckB and DuckC has the same "eat" implementation.',(0,s.jsx)(t.br,{}),"\n","So the problem is, if you image a tree structure, is that inheritance can only be shared downstream the tree. It cannot be shared horizontally.",(0,s.jsx)(t.br,{}),"\n","That's why composition is often favored over inheritance."]}),"\n",(0,s.jsx)(t.h3,{id:"--d-the-solution-composition",children:"- D. The Solution: Composition"}),"\n",(0,s.jsxs)(t.p,{children:["After reading the problems with inheritance, let's now think about the definition of the Strategy Pattern again:",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.em,{children:'"The Strategy Pattern defines a family of algorithms, encapsulate each one, and makes them interchangeable. Strategy lets the algorithm vary independently from the clients that use it".'}),(0,s.jsx)(t.br,{}),"\n","That's exactly our problem here!",(0,s.jsx)(t.br,{}),"\n",'We have an algorithm for "quacking", we have an algorithm for "flying", and what we\'re realizing is that we can\'t create a hierarchical solution in order to share code between these different uses of the different algorithms. so we have to extract the algorithms, and say that each sub-class is actually a "client". A WildDuck is a client. A CityDuck is a client. and they all make use of different algorithms for flying, and quacking, etc.',(0,s.jsx)(t.br,{}),"\n",'And these methods can vary independently from other aspects of the clients.\nSo what do we do? We create "strategies" for quacking, and "strategies" for flying.\nSo we\'ll create Interfaces. For example: IQuackBehavior.',(0,s.jsx)(t.br,{}),"\n",'And what it does is it says - you need to have a "quack" method.',(0,s.jsx)(t.br,{}),"\n","*** Note: there are many ways of approaching this problem that still adhere to the Strategy Pattern, this is just one of them.",(0,s.jsx)(t.br,{}),"\n",'And then we do the same for "flying".',(0,s.jsx)(t.br,{}),"\n",'We\'ll create an interfaces IFlyBehavior, that says you need to have a "fly" method.',(0,s.jsx)(t.br,{}),"\n",'Notice the conceptual change, that now we\'re using a "has-a" relation, instead of a "is-a" relation.',(0,s.jsx)(t.br,{}),"\n",'Now let\'s consider CityDuck and WildDuck as 2 Clients that should have the a "quack" method, wether it be the same or different.',(0,s.jsx)(t.br,{}),"\n","How would we achieve that?",(0,s.jsx)(t.br,{}),"\n","We said that we have an IQuackBehavior interface.",(0,s.jsx)(t.br,{}),"\n","An interface is not instantiate-able, it needs to have a concretion.",(0,s.jsx)(t.br,{}),"\n","So we need to create a concretion called SimpleQuackStrategy.",(0,s.jsx)(t.br,{}),"\n","Now, if those two ducks are the same, they would use that same concretion, and if they're not, we would simply create another concretion, and give it a proper meaningful name."]}),"\n",(0,s.jsxs)(t.p,{children:["\u2022 ",(0,s.jsx)(t.em,{children:(0,s.jsx)(t.strong,{children:'The Term "Delegation"'})}),(0,s.jsx)(t.br,{}),"\n",'In inheritance, the abstract class Duck had a "quack" method on it.',(0,s.jsx)(t.br,{}),"\n",'With the Strategy Pattern, the "quack" method delegates to the quack behavior to its concretion. So actually, when we run "quack", we would in fact run the "quack" method on SimpleQuackStrategy.',(0,s.jsx)(t.br,{}),"\n","This is now possible if my Duck has-an IQuackBehavior, which is concreted through SimpleQuackStrategy."]}),"\n",(0,s.jsxs)(t.p,{children:["\u2022 ",(0,s.jsx)(t.em,{children:(0,s.jsx)(t.strong,{children:"Why use an interface? Why not just use SimpleQuackStrategy?"})}),(0,s.jsx)(t.br,{}),"\n",'Consider a case where Duck points directly to SimpleQuackStrategy, instead of going through IQuackBehavior. Basically just saying "A Duck has-a SimpleQuackBehavior.',(0,s.jsx)(t.br,{}),"\n","This is a problem, and is really bad, because it is significantly less flexible! This creates class explosions.",(0,s.jsx)(t.br,{}),"\n",'All we need is to know that it is "quackable", so maybe we\'ll call the interface IQuackable.']}),"\n",(0,s.jsxs)(t.p,{children:["\u2022 ",(0,s.jsx)(t.em,{children:(0,s.jsx)(t.strong,{children:"How would the composition work?"})}),(0,s.jsx)(t.br,{}),"\n",'With the RubberDuck case we could create a concretion called NoQuack for the "quack" method.',(0,s.jsx)(t.br,{}),"\n","With the DuckA & DuckB case, each of them would use any concretion that it wants, whether it is for IFlyBehavior, or IEatBehavior.",(0,s.jsx)(t.br,{}),"\n",'Basically what we\'re doing now is we\'re taking the "fly" method from the WildDuck class, and placing it in a concretion outside, as if WildDuck client delegates the "fly" ability over to the concretion.']}),"\n",(0,s.jsx)(t.h3,{id:"--e-dependency-injection",children:"- E. Dependency Injection"}),"\n",(0,s.jsxs)(t.p,{children:["What we haven't talked about is Dependency Injection.",(0,s.jsx)(t.br,{}),"\n","We sort of glanced over this.",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.code,{children:"Dependency Injection"})," is only possible IF these behaviors are somehow injected into an instance of a duck, and not hardcoded in the class. if the class hardcodes these things, then we can't do that anymore.",(0,s.jsx)(t.br,{}),"\n","To make this perfectly clear:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"// *** THIS IS BAD ***\n\nclass Duck {\n  IFlyBehavior fb = new SomeParticularFlyBehavior();\n  IQuackBehavior qb;\n  IDisplayBehavior db;\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["If we did this, if we were to hardcode the dependency, it wouldn't be as flexible. It would put me back in a state where I need multiple classes to represent all of these different types of Ducks. Think about it, it is significantly less composable.",(0,s.jsx)(t.br,{}),"\n","We need to somehow inject the behavior."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"// *** THIS IS GOOD ***\n\nclass Duck {\n  IFlyBehavior fb;\n  IQuackBehavior qb;\n  IDisplayBehavior db;\n\n  constructor({ fb, qb, db }){\n    this.fb = fb;\n    this.qb = qb;\n    this.db = db;\n  }\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The key here is to use the constructor injection.",(0,s.jsx)(t.br,{}),"\n",'And now think about how the "fly" method on that class would look like:']}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"public void fly(){\n  this.fb.fly()\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"So you pass in the behavior, and then you execute that behavior within the class."}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"2-observer-pattern",children:(0,s.jsx)(t.strong,{children:"2. Observer Pattern"})}),"\n",(0,s.jsx)(t.h3,{id:"--a-definition",children:"- A. Definition"}),"\n",(0,s.jsx)(t.p,{children:"The Observer Pattern defines a one-to-many dependency between objects so that when one object changes state, all of its dependencies are notified, and are updated automatically."}),"\n",(0,s.jsx)(t.p,{children:"The Observer Pattern introduces a few new terms:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Observer"}),"\n",(0,s.jsx)(t.li,{children:"Observable"}),"\n",(0,s.jsx)(t.li,{children:"Register"}),"\n",(0,s.jsx)(t.li,{children:"Push V.S. Poll"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["In the Observer Pattern, we have 2 objects.",(0,s.jsx)(t.br,{}),"\n","One object is the Observable.",(0,s.jsx)(t.br,{}),"\n","The Observable is simply an object with a state, and its state changes changes over time.",(0,s.jsx)(t.br,{}),"\n","The Observer is just an object that needs/wants to know, for some reason, when the state of the first object, the Observable, has changed.",(0,s.jsx)(t.br,{}),"\n","So we have a relationship between an Observable & an Observer."]}),"\n",(0,s.jsx)(t.h3,{id:"--b-push-vs-pull",children:"- B. Push v.s. Pull"}),"\n",(0,s.jsxs)(t.p,{children:["The Observer Pattern is essentially about going from a Polling architecture to a Push architecture.",(0,s.jsx)(t.br,{}),"\n","Now these terms are usually more used in terms of networking architectures, and web service, and etc. This is just an analogy."]}),"\n",(0,s.jsx)(t.h3,{id:"--c-the-pull-method",children:"- C. The Pull Method"}),"\n",(0,s.jsxs)(t.p,{children:['The Observer want to know about the state of the Observable.\nSo what can it do? We could have the Observer ask the Observable "Hey, did you change state?" over and over again, at fixed intervals, and it would have to do that indefinitely.',(0,s.jsx)(t.br,{}),"\n","But how will we choose what this fixed interval be?",(0,s.jsx)(t.br,{}),"\n","A second?",(0,s.jsx)(t.br,{}),"\n","A half a second?",(0,s.jsx)(t.br,{}),"\n","A long fixed period of time could potentially create a huge delay in response.",(0,s.jsx)(t.br,{}),"\n","And if we were to choose an extremely short period of time, let's say 1 millisecond, it would solve the delay issue, but would cause another major issue of overloading on the system.",(0,s.jsx)(t.br,{}),"\n","And this is just talking about one Observer!",(0,s.jsx)(t.br,{}),"\n",'Consider a case where we have a hundred Observers. They would all want to know if the Observable state had changed, so they would all ask in polling "have you changed state?", and in the next millisecond they would all do the same again. The overload would be insane.',(0,s.jsx)(t.br,{}),"\n","The Observer Pattern helps us move from the polling onto pushing.",(0,s.jsx)(t.br,{}),"\n",'Instead of the observer constantly asking "has your state changed?", the first object is responsible for telling all of its subscribers, the observers which observe it, when it has changed.']}),"\n",(0,s.jsx)(t.h3,{id:"--d-we-need-to-register",children:"- D. We need to Register"}),"\n",(0,s.jsxs)(t.p,{children:["What we've seen up until now, in essence, this is the entire Observer Pattern. But! There's a problem now.",(0,s.jsx)(t.br,{}),"\n","How would the Observable, whose state has changed, know... who all of its subscribers are? in order to do all of the pushing?",(0,s.jsx)(t.br,{}),"\n","Somehow all of the subscribers need to register to the subject.",(0,s.jsx)(t.br,{}),"\n",'In many textbooks, and programming language, the Observable is often considered as "the subject".']}),"\n",(0,s.jsx)(t.h3,{id:"--e-variations-of-the-observer-pattern",children:"- E. Variations of the Observer Pattern"}),"\n",(0,s.jsxs)(t.p,{children:["Different programming languages have different default implementations of the Observer Pattern, and therefore different people draw different diagrams, because there are variations of Observer Pattern. Each of course has its advantages and disadvantages.",(0,s.jsx)(t.br,{}),"\n",'We will talk about the one found in the book of "Head First - Design Patterns", and then discuss what the benefits of the approach that they are suggesting. And then we would also look at a slight variation.']}),"\n",(0,s.jsx)(t.p,{children:"An IObservable has the following functions:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"register(IObserver)"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"unregister(IObserver)"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"notifyBroadcast()"})}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"An IObserver has the following function:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"update(changes)"})}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["So, basically, an Observable holds a list of all Observers that registered to it.",(0,s.jsx)(t.br,{}),"\n","New Observers can register to it, and existing Observers can unregister from it.",(0,s.jsx)(t.br,{}),"\n","Upon calling the Observable's notifyBroadcast, it goes over all Observers that are registered to it, and notifies them on the change.",(0,s.jsx)(t.br,{}),"\n","And how it does that?",(0,s.jsx)(t.br,{}),"\n","It simply calls their ",(0,s.jsx)(t.em,{children:(0,s.jsx)(t.strong,{children:"update()"})})," function."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.em,{children:(0,s.jsx)("font",{size:"6",children:"Summary Example"})})})}),"\n",(0,s.jsxs)(t.p,{children:["A chat room is a good example for using the Observer Pattern.",(0,s.jsx)(t.br,{}),"\n","The Observer Pattern is a very suitable pattern for chat systems.",(0,s.jsx)(t.br,{}),"\n",'If you think about it, you have a Chat Room, which is an Observable, and then you add in Observers to the Chat Room. And then whenever a user broadcasts a message, or I should rather say "simply sends a message", the Observable calls the notify function, so that all of the clients that are connected to the Chat Room can get the latest message that has been sent, i.e. broadcasted by one of the users.']}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"3-decorator-pattern",children:(0,s.jsx)(t.strong,{children:"3. Decorator Pattern"})}),"\n",(0,s.jsx)(t.h2,{id:"--definition",children:"- Definition"}),"\n",(0,s.jsx)(t.p,{children:"The Decorator Pattern attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to sub-classing, or to extending functionality."}),"\n",(0,s.jsx)(t.h2,{id:"--simple-explanation",children:"- Simple Explanation"}),"\n",(0,s.jsxs)(t.p,{children:["You have an object, and instead of sending messages to this object, like for instance ",(0,s.jsx)(t.code,{children:"speak()"}),", and then you expect to get something back, let's say ",(0,s.jsx)(t.code,{children:"hello world!"}),".",(0,s.jsx)(t.br,{}),"\n","Decorator Pattern is saying: if I want to change the thing that's returned, if I want to change the behavior of this method, I could actually do that at runtime, without changing the contents of this particular object. The important thing to realize is that the change occurs at ",(0,s.jsx)(t.strong,{children:"runtime"}),", and not at ",(0,s.jsx)(t.strong,{children:"compilation time"}),".",(0,s.jsx)(t.br,{}),"\n","So, with Decorator Pattern, what we do instead is we say \"Let's actually wrap this object in another object. And when I send the message ",(0,s.jsx)(t.code,{children:"speak()"}),", i'll send the message to the outer object, who will send the message to the inner object, who will send the message back to the outer object, who will return it back to me.  And it will keep on doing that indefinitely.",(0,s.jsx)(t.br,{}),"\n","So that's the essence of the Decorator Pattern.\nThe Decorator Pattern supports convolution, and what that means is that a decorator can wrap a decorator."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Let's look at a JavaScript example:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",metastring:'title="javascript"',children:'const mySymbol = Symbol("mySymbol");\n\nfunction myDecorator(target) {\n  // Add a property with the symbol as the key\n  target[mySymbol] = "This is a symbol property";\n}\n\n@myDecorator\nclass MyClass {\n}\n\nconsole.log(MyClass[mySymbol]); // Outputs: "This is a symbol property"\n'})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"4-factory-pattern",children:(0,s.jsx)(t.strong,{children:"4. Factory Pattern"})}),"\n",(0,s.jsx)(t.p,{children:"We will talk about 2 versions of the Factory Pattern:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"Factory Method"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"Abstract Factory"})}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"a-factory-method-pattern",children:"A. Factory Method Pattern"}),"\n",(0,s.jsxs)(t.p,{children:["Let's first start with a little bit of narrative. Why do we need the Factory Method Pattern? Why do we need a concept called a Factory?",(0,s.jsx)(t.br,{}),"\n","Think about it this way... In our code, we use lots of different objects. In Object Oriented Programming we have classes, and we instantiate objects from these classes, and then we use these objects in a bunch of different ways.",(0,s.jsx)(t.br,{}),"\n","Now, earlier in the course we discussed ",(0,s.jsx)(t.code,{children:"Dependency Injection"})," (in the ",(0,s.jsx)(t.a,{href:"#1-strategy-pattern",title:"Go to the Strategy Pattern",children:"Strategy Pattern"}),"), and what we were doing there is programming by wishful thinking. We were saying \"When i'm in this particular method, instead of constructing some logic right there and then, let's imagine that I already have a thing that does such and such, and that thing was passed to me via the constructor, and use that instead.",(0,s.jsx)(t.br,{}),"\n","Basically you can think about ",(0,s.jsx)(t.code,{children:"dependency Injection"}),' as "programming via wishful thinking".',(0,s.jsx)(t.br,{}),"\n","That thing being passed, needs to be constructed somewhere...."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Definition"}),(0,s.jsx)(t.br,{}),"\n","The Factory Method Pattern defines an interface for creating an object. But! it lets sub-classes decide which class to instantiate. Factory Method lets the class defer instantiation to sub-classes."]}),"\n",(0,s.jsxs)(t.p,{children:["Let's dig through dig line by line:",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.em,{children:"Quote: The Factory Method Pattern defines an interface..."}),(0,s.jsx)(t.br,{}),"\n","Where their saying an ",(0,s.jsx)(t.code,{children:"interface"})," they don't necessarily mean the keyword ",(0,s.jsx)(t.code,{children:"interface"}),", like they don't mean an interface as in ",(0,s.jsx)(t.code,{children:"class"})," ",(0,s.jsx)(t.code,{children:"interface"})," ",(0,s.jsx)(t.code,{children:"abstract class"})," sort of way, but rather an interface in the sense of a contract. A common contract under which you can refer to this particular thing. In other words, it could be an interface, but it could also be a superclass.",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.em,{children:"Quote: ...for creating an object."}),(0,s.jsx)(t.br,{}),"\n","The key point of Factory Pattern is that in the end, you want an object. You don't necessarily know ",(0,s.jsx)(t.em,{children:"how"})," you want to construct that object, ",(0,s.jsx)(t.em,{children:"why"})," you want to construct that object, and ",(0,s.jsx)(t.em,{children:"what"})," parameters you want to pass when constructing that object. These are all unknowns, and that's why you want to defer, why you wanna let somebody else take that decision.\n",(0,s.jsx)(t.em,{children:"Quote: ...But! it lets sub-classes decide which class to instantiate."}),(0,s.jsx)(t.br,{}),"\n","It's not only about which class to instantiate, it's also about what you want to pass to that class that you're instantiating.",(0,s.jsx)(t.br,{}),"\n",(0,s.jsx)(t.em,{children:"Quote: ...Factory Method lets the class defer instantiation to sub-classes."}),(0,s.jsx)(t.br,{}),"\n","Honestly, i'm not entirely sure what they mean here. I'm not sure if they mean that the common ancestor, defers the decision to the sub-classes, or whether they simply mean that whoever is using the factory defers to these factories. But since they're saying sub-classes, they probably mean that the animal factory does not have to make the decision about which of the Animal classes to instantiate, and what to pass to it when instantiating, but rather that these sub-classes decide which object to construct and how."]}),"\n",(0,s.jsx)(t.p,{children:"Lets create the UML:"}),"\n",(0,s.jsxs)("div",{style:{border:"1px solid black",borderRadius:"5px",padding:"20px"},children:[(0,s.jsxs)("div",{style:{display:"flex",alignItems:"center"},children:[(0,s.jsx)("div",{style:{textAlign:"center",border:"1px solid black",margin:"0",borderRadius:"5px",borderColor:"inherit",width:"200px",height:"100px"},children:(0,s.jsx)("div",{style:{borderBottom:"1px solid",borderColor:"inherit"},children:(0,s.jsx)(t.p,{children:"Factory"})})}),(0,s.jsx)("div",{style:{width:"200px"}}),(0,s.jsx)("div",{style:{textAlign:"center",border:"1px solid black",margin:"0",borderRadius:"5px",borderColor:"inherit",width:"200px",height:"100px"},children:(0,s.jsx)("div",{style:{borderBottom:"1px solid",borderColor:"inherit"},children:(0,s.jsx)(t.p,{children:"Product"})})})]}),(0,s.jsxs)("div",{style:{display:"flex",alignItems:"center",justifyContent:"start"},children:[(0,s.jsxs)("div",{style:{display:"flex",alignItems:"center",justifyContent:"center",flexDirection:"column",width:"200px"},children:[(0,s.jsx)("div",{children:"\u25b3"}),(0,s.jsx)("div",{children:"|"}),(0,s.jsx)("div",{children:"|"}),(0,s.jsx)("div",{children:"|"})]}),(0,s.jsx)("div",{style:{width:"200px"}}),(0,s.jsxs)("div",{style:{display:"flex",alignItems:"center",justifyContent:"center",flexDirection:"column",width:"200px"},children:[(0,s.jsx)("div",{children:"\u25b3"}),(0,s.jsx)("div",{children:"|"}),(0,s.jsx)("div",{children:"|"}),(0,s.jsx)("div",{children:"|"})]})]}),(0,s.jsxs)("div",{style:{display:"flex",alignItems:"center"},children:[(0,s.jsx)("div",{style:{textAlign:"center",border:"1px solid black",margin:"0",borderRadius:"5px",borderColor:"inherit",width:"200px",height:"100px"},children:(0,s.jsx)("div",{style:{borderBottom:"1px solid",borderColor:"inherit"},children:(0,s.jsx)(t.p,{children:"ConcreteFactory"})})}),(0,s.jsx)("div",{style:{width:"200px",textAlign:"center"},children:"\u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014\u25b7"}),(0,s.jsx)("div",{style:{textAlign:"center",border:"1px solid black",margin:"0",borderRadius:"5px",borderColor:"inherit",width:"200px",height:"100px"},children:(0,s.jsx)("div",{style:{borderBottom:"1px solid",borderColor:"inherit"},children:(0,s.jsx)(t.p,{children:"ConcreteProduct"})})})]})]}),"\n",(0,s.jsx)(t.h2,{id:"b-abstract-factory-pattern",children:"B. Abstract Factory Pattern"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:(0,s.jsx)("font",{size:"5",children:"Intro"})})}),"\n",(0,s.jsxs)(t.p,{children:["The Abstract Factory Pattern is extremely similar to the Factory Method Pattern.",(0,s.jsx)(t.br,{}),"\n","Actually, in some sense, an Abstract Factory is a set of Factory Methods.",(0,s.jsx)(t.br,{}),"\n","So an Abstract Factory makes use of multiple Factory Methods."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:(0,s.jsx)("font",{size:"5",children:"Formal Definition"})})}),"\n",(0,s.jsx)(t.p,{children:"The Abstract Factory Pattern provides an interface for creating families of related or dependent objects without specifying their concrete class."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:(0,s.jsx)("font",{size:"5",children:"Simple Words Explanation"})})}),"\n",(0,s.jsxs)(t.p,{children:["So, if you contrast this to the Factory Method Pattern, te single difference between these two is that the Factory Method Pattern constructs a ",(0,s.jsx)(t.code,{children:"single"})," object, where-as the Abstract Factory Pattern constructs ",(0,s.jsx)(t.code,{children:"multiple"})," objects.",(0,s.jsx)(t.br,{}),"\n","And why is this a good thing?",(0,s.jsx)(t.br,{}),"\n","Consider a case where your factory creates UI controllers, Like an AlertBox and an AcceptButton for that AlertBox.",(0,s.jsx)(t.br,{}),"\n","Now let's imagine that you can create an AlertBox for Windows, an AlertBox for Macos, and an AlertBox for Linux. And the same logic also applies to the AcceptButton.",(0,s.jsx)(t.br,{}),"\n","With the Factory Method Pattern, you would have an IFactory for each of them, and you would be able to create illogical situations, like a combination of an AlertBox for Linux, and an AcceptButton for Windows.\nSo how does the Abstract Factory Pattern prevent that?\nIn the IFactory of an Abstract Factory Pattern, you have a method for both methods, one for creating an AlertBox and one for creating an AcceptButton. Then, in your concretion, in your actual factory, you could implement one factory for Windows components, one for Linux, and one for Macos.",(0,s.jsx)(t.br,{}),"\n","Remember the definition of the Abstract Factory Pattern: The Abstract Factory Pattern provides an interface for creating ",(0,s.jsx)(t.strong,{children:"families"})," of ",(0,s.jsx)(t.strong,{children:"related"})," or ",(0,s.jsx)(t.strong,{children:"dependent"})," objects without specifying their concrete class."]}),"\n",(0,s.jsx)(t.p,{children:"So now, instead of having 1 factory for each product, we have 1 factory for each family of Products. That way, we prevent illogical mixes and matches."}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"5-singleton-pattern",children:(0,s.jsx)(t.strong,{children:"5. Singleton Pattern"})}),"\n",(0,s.jsx)(t.h3,{id:"a-formal-definition",children:"A. Formal Definition"}),"\n",(0,s.jsx)(t.p,{children:"The Singleton Pattern a class has only 1 instance, and provides a global point of access to it."}),"\n",(0,s.jsx)(t.h3,{id:"b-simple-explanation",children:"B. Simple Explanation"}),"\n",(0,s.jsx)(t.p,{children:"So the Singleton Pattern helps you to make it impossible to instantiate a class, except for a single time. And whenever you want an instance, you will inevitably have to use that instance. The way it works it such that whenever you ask for an instance, you always get the same instance. S2 there's actually two points to it: one is about making sure that you only ever have a single instance, and the other is providing a global access to that instance."}),"\n",(0,s.jsx)(t.h3,{id:"c-reasons-why-you-should-never-use-it",children:"C. Reasons Why You should Never Use It"}),"\n",(0,s.jsxs)(t.p,{children:["Many people argue that you should never use the Singleton Pattern.",(0,s.jsx)(t.br,{}),"\n","Why?",(0,s.jsx)(t.br,{}),"\n","Well, one of the first things we learn when we talk about programming is to avoid globals. We much rather prefer to scope variables and functions, so that not everything is leaking into the global namespace. For one because it's hard to control, and things might be ambiguous.",(0,s.jsx)(t.br,{}),"\n","But probably more importantly, whenever you leak something into the global namespace, and make it globally accessible, that thing might change without you knowing it. It's much harder to reason about your program, when you don't have control of the scope of the variable that you're interacting with, anyone within that whole program might change that variable, assuming it's change-able of course.",(0,s.jsx)(t.br,{}),"\n","The second point about making sure that you only have a single instance, that too is kind of an absurd idea. If you think about it, that's an assumption! You're ",(0,s.jsx)(t.em,{children:"assuming"})," that in the future I will only ever ever need a single instance of this particular class. That isn't necessarily true! Especially if your application is growing. For an example, think about a chat application. So at first you might think that a Chat is a singleton. Like, you want to be able to reference the chat in which users are, wherever in the program. So to make it convenient for yourself, you make a singleton, with a global point of access, to this instance of the Chat, but then as time progresses, you start to realize that actually, we're being very successful with this chat"]}),"\n",(0,s.jsx)(t.h3,{id:"d-how-to-implement-a-singleton-pattern",children:"D. How to implement a singleton pattern"}),"\n",(0,s.jsxs)(t.p,{children:['The key about singleton pattern is that the constructor of the singleton we make private. This was crazy back in the day, because the constructor is public so that you can construct instances of the object. But, you can actually make the constructor of a class private. Which means that from the outside people can\'t construct that class. The can\'t say "new Singleton()". Only singletons can instantiate Singletons. But if you can\'t make a Singleton but saying "new Singleton()", then you have no singletons that can make singleton. So now you\'re in a situation where you\'re saying "well, then how do I create the first singleton?"',(0,s.jsx)(t.br,{}),"\n","That's when ",(0,s.jsx)(t.strong,{children:"Static methods"})," come in.",(0,s.jsx)(t.br,{}),"\n","Once again, a lot of people argue you should never use static methods.",(0,s.jsx)(t.br,{}),"\n","But that's when we use static methods. Because a static method is a ",(0,s.jsx)(t.em,{children:"class"})," method. A static method on the class singleton is still within sort of the namespace of the singleton, which means that it actually has access to the private constructor of the singleton.\nLet's look at a diagram:"]}),"\n",(0,s.jsx)("div",{style:{border:"1px solid black",borderRadius:"5px",padding:"20px"},children:(0,s.jsx)("div",{style:{display:"flex",alignItems:"center",justifyContent:"space-between"},children:(0,s.jsxs)("div",{style:{display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"space-between",textAlign:"center",border:"1px solid black",margin:"0",borderRadius:"5px",borderColor:"inherit",width:"250px",height:"120px"},children:[(0,s.jsx)("div",{style:{width:"100%",borderBottom:"1px solid",borderColor:"inherit"},children:(0,s.jsx)(t.p,{children:"Singleton"})}),(0,s.jsx)("div",{style:{width:"100%",borderColor:"inherit",textAlign:"left",padding:"10px"},children:(0,s.jsx)(t.p,{children:"static function getInstance()"})})]})})}),"\n",(0,s.jsxs)(t.p,{children:["So the singleton has a static method that returns a singleton. In other words, it returns an instance of this class in which it resides. We'll call that function ",(0,s.jsx)(t.strong,{children:"getInstance"}),".",(0,s.jsx)(t.br,{}),"\n","The singleton is a class, that has a static method, called ",(0,s.jsx)(t.code,{children:"getInstance"}),", and when you call that static method you get back an instance."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"Singleton.getInstance()\n"})}),"\n",(0,s.jsx)(t.p,{children:"Notice that we're not instantiating a singleton like so:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"Singleton s = new Singleton()\ns.getInstance()\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The second important piece is that the Singleton then has static variable, which we'll name ",(0,s.jsx)(t.code,{children:"instance"}),", of type ",(0,s.jsx)(t.em,{children:"Singleton"}),", which is eventually gonna be the instance. The variable is also marked as private, so you wouldn't have access to it without going through the ",(0,s.jsx)(t.code,{children:"getInstance"})," method.",(0,s.jsx)(t.br,{}),"\n","Now, what ",(0,s.jsx)(t.code,{children:"getInstance"})," would then do is check if there's an instance within this static variable called ",(0,s.jsx)(t.code,{children:"instance"}),", that holds a variable of type Singleton. If it does exist, it would return that instance. But if it doesn't exist... it will instantiate it, and save it into this variable. So the next time we'll call ",(0,s.jsx)(t.code,{children:"getInstance"}),", there is a variable."]}),"\n",(0,s.jsx)(t.p,{children:"Full implementation:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:"public class Singleton {\n  private Singleton(){}\n\n  public static Singleton getInstance(){\n    if(this.instance == null){\n      this.instance = new Singleton();\n    }\n\n    return this.instance\n  }\n\n  ...\n}\n"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.p,{children:"ore"}),"\n",(0,s.jsx)(t.h2,{id:"6-action-pattern",children:(0,s.jsx)(t.strong,{children:"6. Action Pattern"})}),"\n",(0,s.jsx)(t.h3,{id:"a-description",children:"A. Description"}),"\n",(0,s.jsx)(t.h3,{id:"b-more-details",children:"B. More Details"}),"\n",(0,s.jsxs)(t.p,{children:["We construct the command, we inject the command, into the invoker, and whenever the invoker invokes the command, we execute that command, and that command might do something to something else. In the book they call this ",(0,s.jsx)(t.em,{children:"something else"})," the ",(0,s.jsx)(t.strong,{children:"Receiver"}),". You can have tons of invoker, that are just coupled to command. Any command can do anything it wants to any particular receiver. And if you're sharing interfaces with receivers maybe you could even use the same receiver for multiple commands.\nLet's talk about the diagram:",(0,s.jsx)(t.br,{}),"\n","We have an ",(0,s.jsx)(t.code,{children:"Invoker"})," and a ",(0,s.jsx)(t.code,{children:"Command"}),".",(0,s.jsx)(t.br,{}),"\n","An ",(0,s.jsx)(t.code,{children:"Invoker"})," has zero-to-many commands.",(0,s.jsx)(t.br,{}),"\n","But not concrete commands. It couples to the interface ",(0,s.jsx)(t.code,{children:"ICommand"}),".",(0,s.jsx)(t.br,{}),"\n","The interface ",(0,s.jsx)(t.code,{children:"ICommand"})," then of course has a number of implementations, and these we call ",(0,s.jsx)(t.code,{children:"Commands"}),".",(0,s.jsx)(t.br,{}),"\n","And any particular command acts upon (has) a ",(0,s.jsx)(t.code,{children:"Receiver"}),".",(0,s.jsx)(t.br,{}),"\n","An example would be a remote control, an ",(0,s.jsx)(t.em,{children:"on"})," button, and a lamp.",(0,s.jsx)(t.br,{}),"\n","In this analogy, the remote control is the ",(0,s.jsx)(t.code,{children:"Invoker"}),", the invocation occurs when pressing the button, which sends a ",(0,s.jsx)(t.code,{children:"command"}),", and the ",(0,s.jsx)(t.code,{children:"Receiver"})," is the lamp.",(0,s.jsx)(t.br,{}),"\n",'So basically the remote control is loaded with commands, or actually ICommands, and because the ICommand is an interface, it needs to be implemented by something, by any particular concrete command, and this command could be like a "turn on light" command, or "set color of light".',(0,s.jsx)(t.br,{}),"\n","Then, this command precedes to act upon some particular receiver."]}),"\n",(0,s.jsx)(t.p,{children:"Let's now talk about the methods on each:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"Invoker"})," has a ",(0,s.jsx)(t.code,{children:"setCommand"}),", which takes in an ",(0,s.jsx)(t.code,{children:"ICommand"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"ICommand"})," has 2 methods: ",(0,s.jsx)(t.code,{children:"execute"})," & ",(0,s.jsx)(t.code,{children:"unExecute"}),". One is the inverse of the other. One does the thing, and the other undo's the thing."]}),"\n",(0,s.jsxs)(t.li,{children:["And then of course any concrete command needs to implement these 2: ",(0,s.jsx)(t.code,{children:"execute"})," & ",(0,s.jsx)(t.code,{children:"unExecute"}),".",(0,s.jsx)(t.br,{}),"\n","The ",(0,s.jsx)(t.code,{children:"execute"})," function is void, meaning it doesn't return anything.",(0,s.jsx)(t.br,{}),"\n","And most importantly, they take no arguments. Because the command itself has encapsulated all of the things it needs to perform its duties. There's an action encapsulated in the command.",(0,s.jsx)(t.br,{}),"\n","The concrete ",(0,s.jsx)(t.code,{children:"Command"})," has an instance of the ",(0,s.jsx)(t.code,{children:"Receiver"})," stored within it. We pass the receiver to the constructor."]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"class Command {\n  /**\n   * @private\n   */ \n  receiver\n\n  constructor({receiver}){\n\n  }\n}\n"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"999-bridge-pattern",children:(0,s.jsx)(t.strong,{children:"999. Bridge Pattern"})}),"\n",(0,s.jsx)(t.h3,{id:"a-what-is-the-goal-of-the-bridge-pattern",children:"A. What is the Goal of the Bridge Pattern?"}),"\n",(0,s.jsx)(t.p,{children:"The intent of the Bride Pattern is to decouple an abstraction from its implementation so that the two can vary independently."}),"\n",(0,s.jsx)(t.h3,{id:"b-the-interface-segregation-principle",children:"B. The interface segregation principle"}),"\n",(0,s.jsxs)(t.p,{children:["The interface segregation principle states that clients should not be forced to depend on method that they do not use.",(0,s.jsx)(t.br,{}),"\n","For example, Book should no be forced to depend on the method getBio, just because Artist wants to have the method getBio. because books don't have biographies. Authors of books have biographies. So that might be a good reason for not mixing Artist & Book, and leave them as separate."]}),"\n",(0,s.jsx)(t.p,{children:"\u2022 Abstraction\n\u2022 Concrete Abstraction\n\u2022 Implementor\n\u2022 Concrete Implementor"}),"\n",(0,s.jsxs)(t.p,{children:["An abstraction has a single implementor.",(0,s.jsx)(t.br,{}),"\n","An abstraction is an abstract, so in order for it to be used, we need to use any of the concrete abstractions.",(0,s.jsx)(t.br,{}),"\n","The implementor too is an abstraction, so any concrete abstraction needs to have, a concrete implementor."]}),"\n",(0,s.jsxs)(t.p,{children:["Example:",(0,s.jsx)(t.br,{}),"\n","Abstractions are Views.",(0,s.jsx)(t.br,{}),"\n","Implementors are Media Resources.",(0,s.jsx)(t.br,{}),"\n","Concrete Abstractions are: LongFormView, ShortFormView",(0,s.jsx)(t.br,{}),"\n","Concrete implementors are: Artist Resource, Book Resource.",(0,s.jsx)(t.br,{}),"\n",'A little bot of an "outside of scope" material, think about the Artist Resource... It could actually adapt over an Artist. which what i really meant is a concretion. so we might have a concretion called an Artist, and then the Artist Resource would have an Artist, and not have an abstraction that is shared amongst these resources. To continue this example, we might have another concretion called a Book, and then we\'d say the Book Resource has a Book. So the Artist Resource adapt over an Artist, and the Book Resource adapts over a Book. This is how we make the Artist Resource and the Book Resource behaviorally different. There is some behavior that is fundamentally different.',(0,s.jsx)(t.br,{}),"\n","In the same way, LongForm is fundamentally different from the Short Form. And it really is, except the methods."]}),"\n",(0,s.jsxs)("div",{style:{border:"1px solid black",borderRadius:"5px",padding:"20px"},children:[(0,s.jsxs)("div",{style:{display:"flex",alignItems:"center"},children:[(0,s.jsx)("div",{style:{textAlign:"center",border:"1px solid black",margin:"0",borderRadius:"5px",borderColor:"inherit",width:"200px",height:"100px"},children:(0,s.jsx)("div",{style:{borderBottom:"1px solid",borderColor:"inherit"},children:(0,s.jsx)(t.p,{children:"???"})})}),(0,s.jsx)("div",{style:{margin:"10px"},children:"\u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014 \u2014>"}),(0,s.jsx)("div",{style:{textAlign:"center",border:"1px solid black",margin:"0",borderRadius:"5px",borderColor:"inherit",width:"200px",height:"100px"},children:(0,s.jsx)("div",{style:{borderBottom:"1px solid",borderColor:"inherit"},children:(0,s.jsx)(t.p,{children:"???"})})})]}),(0,s.jsxs)("div",{style:{display:"flex",alignItems:"center",justifyContent:"start"},children:[(0,s.jsxs)("div",{style:{display:"flex",alignItems:"center",justifyContent:"center",flexDirection:"column",width:"200px"},children:[(0,s.jsx)("div",{children:"\u25b3"}),(0,s.jsx)("div",{children:"|"}),(0,s.jsx)("div",{children:"|"}),(0,s.jsx)("div",{children:"|"})]}),(0,s.jsx)("div",{style:{width:"200px"}}),(0,s.jsxs)("div",{style:{display:"flex",alignItems:"center",justifyContent:"center",flexDirection:"column",width:"200px"},children:[(0,s.jsx)("div",{children:"\u25b3"}),(0,s.jsx)("div",{children:"|"}),(0,s.jsx)("div",{children:"|"}),(0,s.jsx)("div",{children:"|"})]})]}),(0,s.jsxs)("div",{style:{display:"flex"},children:[(0,s.jsx)("div",{style:{textAlign:"center",border:"1px solid black",margin:"0",borderRadius:"5px",borderColor:"inherit",width:"200px",height:"100px"},children:(0,s.jsx)("div",{style:{borderBottom:"1px solid",borderColor:"inherit"},children:(0,s.jsx)(t.p,{children:"???"})})}),(0,s.jsx)("div",{style:{width:"200px"}}),(0,s.jsx)("div",{style:{textAlign:"center",border:"1px solid black",margin:"0",borderRadius:"5px",borderColor:"inherit",width:"200px",height:"100px"},children:(0,s.jsx)("div",{style:{borderBottom:"1px solid",borderColor:"inherit"},children:(0,s.jsx)(t.p,{children:"???"})})})]})]})]})}function d(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>o});var s=n(7294);const i={},a=s.createContext(i);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);