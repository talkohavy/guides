"use strict";(self.webpackChunkdocusaurus_guides=self.webpackChunkdocusaurus_guides||[]).push([[8719],{3697:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var t=o(6070),r=o(5710);const s={sidebar_label:"9. Storybook",sidebar_position:8},a="Guide for Storybook",i={id:"programming/storybook",title:"Guide for Storybook",description:"1. Getting started",source:"@site/docs/programming/storybook.md",sourceDirName:"programming",slug:"/programming/storybook",permalink:"/guides/docs/programming/storybook",draft:!1,unlisted:!1,editUrl:"https://github.com/talkohavy/guides/docs/programming/storybook.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_label:"9. Storybook",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"8. npm publish a package",permalink:"/guides/docs/programming/npm"},next:{title:"10. Docker",permalink:"/guides/docs/programming/docker"}},l={},d=[{value:"1. Getting started",id:"1-getting-started",level:2},{value:"1.1. Installation",id:"11-installation",level:3},{value:"1.2. Configure Storybook with Tailwind",id:"12-configure-storybook-with-tailwind",level:3},{value:"1.3. Configure Storybook With Dark Mode",id:"13-configure-storybook-with-dark-mode",level:3},{value:"2. The *.stories.jsx Files",id:"2-the-storiesjsx-files",level:2},{value:"3. A Component&#39;s Meta",id:"3-a-components-meta",level:2},{value:"4. Layout Centered",id:"4-layout-centered",level:2},{value:"5 Writing a Story",id:"5-writing-a-story",level:2},{value:"5.1. Introduction",id:"51-introduction",level:3},{value:"5.2. Defining stories",id:"52-defining-stories",level:3},{value:"5.3. Rename stories",id:"53-rename-stories",level:3},{value:"5.4. Story level args",id:"54-story-level-args",level:3},{value:"5.5 Story Custom Render",id:"55-story-custom-render",level:3},{value:"5.6. Hide an arg&#39;s controller",id:"56-hide-an-args-controller",level:3},{value:"5.7 Storybook Controls",id:"57-storybook-controls",level:3},{value:"- Introduction",id:"--introduction",level:4},{value:"- Adding docs",id:"--adding-docs",level:4},{value:"- Choosing the control type",id:"--choosing-the-control-type",level:4},{value:"5.8. Conditional controls",id:"58-conditional-controls",level:3},{value:"6. Public - Static Serve",id:"6-public---static-serve",level:2},{value:"Deprecated",id:"deprecated",level:2},{value:"7. Using Decorators for Context Providers",id:"7-using-decorators-for-context-providers",level:2},{value:"8. Levels of <code>args</code>",id:"8-levels-of-args",level:2},{value:"- Component lvl <code>args</code>",id:"--component-lvl-args",level:3},{value:"- Global lvl <code>args</code>",id:"--global-lvl-args",level:3},{value:"9. Override theme on the component level",id:"9-override-theme-on-the-component-level",level:2},{value:"10. Loaders",id:"10-loaders",level:2},{value:"999 Misc",id:"999-misc",level:2},{value:"2.4. Actions to enhance args",id:"24-actions-to-enhance-args",level:2},{value:"2.5. Using the play function",id:"25-using-the-play-function",level:2}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"guide-for-storybook",children:"Guide for Storybook"}),"\n",(0,t.jsx)(n.h2,{id:"1-getting-started",children:"1. Getting started"}),"\n",(0,t.jsx)(n.h3,{id:"11-installation",children:"1.1. Installation"}),"\n",(0,t.jsx)(n.p,{children:"bluh bluh bluh"}),"\n",(0,t.jsx)(n.h3,{id:"12-configure-storybook-with-tailwind",children:"1.2. Configure Storybook with Tailwind"}),"\n",(0,t.jsxs)(n.p,{children:["To have Storybook and tailwind working together is rather simple.",(0,t.jsx)(n.br,{}),"\n","All Storybook needs is a css, generated by tailwind as an output, as its input.",(0,t.jsx)(n.br,{}),"\n","That same css file needs to be imported in the ",(0,t.jsx)(n.code,{children:"preview.js"})," configuration file of Storybook:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title=".storybook/preview.js"',children:"import '../styles/tailwind.css';\n\n/** @type { import('@storybook/react').Preview } */\nconst preview = {\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n};\n\nexport default preview;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This will make Tailwind\u2019s style classes available to all of your stories.",(0,t.jsx)(n.br,{}),"\n","To generate that css file with tailwind, all you gotta do is wrote a script that does so:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "pre-storybook-prod": "npx tailwindcss -o ./styles/tailwind.css --minify"\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This is for production.",(0,t.jsx)(n.br,{}),"\n","For development, you would most-likely want a ",(0,t.jsx)(n.code,{children:"watch"})," version of that script, so that you could make changes to the source code, and see changes in real-time:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "pre-storybook-dev": "npx tailwindcss -i ./src/index.css -o ./styles/tailwind.css --watch"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"13-configure-storybook-with-dark-mode",children:"1.3. Configure Storybook With Dark Mode"}),"\n",(0,t.jsx)(n.p,{children:"First of all, update your tailwind.config.js file to change themes based on a class or data-attribute. This example uses a data-attribute."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="tailwind.config.js"',children:"module.exports = {\n  content: ['./src/**/*.{js,jsx,ts,tsx}'],\n  // Toggle dark-mode based on .dark class or data-mode=\"dark\"\n  darkMode: ['class', '[data-theme=\"dark\"]'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"Next, install the @storybook/addon-themes addon to provide the switcher tool."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm i -D @storybook/addon-themes\n"})}),"\n",(0,t.jsx)(n.p,{children:"Then, add following content to .storybook/main.js:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title=".storybook/main.js"',children:"export default {\n  addons: ['@storybook/addon-themes'],\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Toggle themes by class name"})}),"\n",(0,t.jsx)(n.p,{children:"Add the withThemeByClassName decorator to your Storybook from @storybook/addon-themes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title=".storybook/preview.js"',children:"import { withThemeByClassName } from '@storybook/addon-themes';\n\n/* snipped for brevity */\n\nexport const decorators = [\n  withThemeByClassName({\n    themes: { light: 'light', dark: 'dark' },\n    defaultTheme: 'light',\n  }),\n];\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Toggle themes by data-attribute"})}),"\n",(0,t.jsx)(n.p,{children:"Add the withThemeByDataAttribute decorator to your Storybook from @storybook/addon-themes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title=".storybook/preview.js"',children:"import { withThemeByDataAttribute } from '@storybook/addon-themes';\n\n/* snipped for brevity */\n\nexport const decorators = [\n  withThemeByDataAttribute({\n    themes: {\n      light: 'light',\n      dark: 'dark',\n    },\n    defaultTheme: 'light',\n    attributeName: 'data-mode',\n  }),\n];\n"})}),"\n",(0,t.jsx)(n.h2,{id:"2-the-storiesjsx-files",children:"2. The *.stories.jsx Files"}),"\n",(0,t.jsxs)(n.p,{children:["Storybook scans your project and looks for files which end with: ",(0,t.jsx)(n.code,{children:".stories.js"}),", ",(0,t.jsx)(n.code,{children:".stories.jsx"}),", ",(0,t.jsx)(n.code,{children:".stories.ts"}),", ",(0,t.jsx)(n.code,{children:".stories.tsx"}),".",(0,t.jsx)(n.br,{}),"\n","Notice how it has ",(0,t.jsx)(n.code,{children:"stories"})," in it's path, in ",(0,t.jsx)(n.em,{children:"plural"}),", to note that each file representing a component can export multiple stories. A *.stories.js file defines all the stories for a component. Each story has a corresponding sidebar item in the Storybook app. When you click on a story, it renders in the Canvas an isolated preview iframe."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["USE ONLY ",(0,t.jsx)(n.code,{children:".stories.jsx"})," with ",(0,t.jsx)(n.code,{children:"jsx"})," extension!!"]})}),"\n",(0,t.jsxs)(n.p,{children:["If you use ",(0,t.jsx)(n.code,{children:".js"})," extension, than jsx you write would result in Storybook crashing! With a useless explanation as to why!"]}),"\n",(0,t.jsx)(n.h2,{id:"3-a-components-meta",children:"3. A Component's Meta"}),"\n",(0,t.jsxs)(n.p,{children:["Each ",(0,t.jsx)(n.code,{children:".stories.jsx"})," file must include a Component's ",(0,t.jsx)(n.code,{children:"meta"}),", and ",(0,t.jsx)(n.strong,{children:"export default"})," it.",(0,t.jsx)(n.br,{}),"\n","The ",(0,t.jsx)(n.code,{children:"meta"})," is simply a javascript object with properties.",(0,t.jsx)(n.br,{}),"\n","At the very least, the ",(0,t.jsx)(n.code,{children:"meta"})," object must contain the ",(0,t.jsx)(n.code,{children:"component"})," key, which points to the ",(0,t.jsx)(n.em,{children:"actual"})," component.\nThe default export metadata controls how Storybook lists your stories and provides information used by addons. For example, here\u2019s the default export for a story file Button.stories.js|ts:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="Button.stories.jsx"',children:"import Button from './Button';\n\nexport default {\n  component: Button\n}\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Starting with Storybook version 7.0, story titles are analyzed statically as part of the build process. The ",(0,t.jsx)(n.strong,{children:"default"})," export must contain a ",(0,t.jsx)(n.em,{children:"title"})," property that can be read statically or a component property from which an automatic title can be computed. Using the id property to customize your story URL must also be statically readable."]})}),"\n",(0,t.jsx)(n.h2,{id:"4-layout-centered",children:"4. Layout Centered"}),"\n",(0,t.jsxs)(n.p,{children:["Another nice-to-have key inside meta is the ",(0,t.jsx)(n.code,{children:"parameters.layout"}),", which tells Storybook where to render the component on the screen. By default, it renders it on the top-left, but it would be nice to have it centered, right?\nTo do so, simply add:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="Button.stories.jsx"',children:"import Button from './Button';\n\nexport default {\n  component: Button,\n  parameters: {\n    // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/react/configure/story-layout\n    layout: 'centered',\n  },\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"5-writing-a-story",children:"5 Writing a Story"}),"\n",(0,t.jsx)(n.h3,{id:"51-introduction",children:"5.1. Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"story"})," is merely a javascript object which hold an ",(0,t.jsx)(n.code,{children:"args"})," key. combination of values for the component's props, which describes how to render the component.",(0,t.jsx)(n.br,{}),"\n","A ",(0,t.jsx)(n.code,{children:"story"})," needs to be named-exported from the ",(0,t.jsx)(n.code,{children:"*stories.js"})," file.",(0,t.jsx)(n.br,{}),"\n","A ",(0,t.jsx)(n.code,{children:"story"})," with an empty as an object, will simply mean that all the component's props are undefined.",(0,t.jsx)(n.br,{}),"\n","The ",(0,t.jsx)(n.em,{children:"variable name"})," holding the ",(0,t.jsx)(n.code,{children:"story"})," will be the name presented in the Storybook app, describing that ",(0,t.jsx)(n.code,{children:"story"}),", so it's a good idea to have it uppercased.\nIf a stories.js file does not export a single story, no visuals of that component would appear in the Storybook app. It would be like the component doesn't even exist."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="YourComponent.stories.jsx"',children:"import { YourComponent } from './YourComponent';\n\n//\ud83d\udc47 This default export determines where your story goes in the story list\nexport default {\n  component: YourComponent,\n};\n\nexport const FirstStory = {\n  args: {\n    //\ud83d\udc47 The args you need here will depend on your component\n  },\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"52-defining-stories",children:"5.2. Defining stories"}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.strong,{children:"named exports"})," of a file to define your component\u2019s stories. We recommend you use ",(0,t.jsx)(n.strong,{children:"UpperCamelCase"})," for your story exports. Here\u2019s how to render ",(0,t.jsx)(n.code,{children:"Button"}),' in the "primary" state and export a story called ',(0,t.jsx)(n.code,{children:"Primary"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="Button.stories.jsx"',children:"import { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\n/*\n *\ud83d\udc47 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: () => <Button primary label=\"Button\" />,\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"53-rename-stories",children:"5.3. Rename stories"}),"\n",(0,t.jsxs)(n.p,{children:["You can rename a story to give it a more accurate display name using the ",(0,t.jsx)(n.code,{children:"name"})," property on your ",(0,t.jsx)(n.code,{children:"story"})," object.",(0,t.jsx)(n.br,{}),"\n","Here's an example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="Button.stories.jsx"',children:"import { Button } from './Button';\n\nexport const Primary = {\n  name: 'I am the primary',\n  render: () => <Button primary label=\"Button\" />,\n};\n\nexport default { component: Button };\n"})}),"\n",(0,t.jsx)(n.h3,{id:"54-story-level-args",children:"5.4. Story level args"}),"\n",(0,t.jsxs)(n.p,{children:["Obviously we've seen those already. These are the ",(0,t.jsx)(n.code,{children:"args"})," defined on each story:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const Default = {\n  name: 'Default Case',\n  args: {\n    isPrimary: true,\n    color: 'blue',\n    disabled: false,\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"These are the strongest args, and will take precedence over Component level args & global level args."}),"\n",(0,t.jsx)(n.h3,{id:"55-story-custom-render",children:"5.5 Story Custom Render"}),"\n",(0,t.jsx)(n.p,{children:"Here's how you can have a custom-made renderer for your story:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export const Primary = {\n  args: { isPrimary: true, label: 'Button' },\n  render: (args) => (\n    const { backgroundColor, isPrimary, label, size } = args;\n    // \ud83d\udc47 Assigns the function result to a variable\n    const someFunctionResult = someFunction(propertyA, propertyB);\n\n    <Button {...args} someComplexProp={someFunctionResult}/>\n  ),\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This could be useful in multiple cases.",(0,t.jsx)(n.br,{}),"\n","For example, in a case where you need the parent to have ",(0,t.jsx)(n.code,{children:'dir="rtl"'}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"56-hide-an-args-controller",children:"5.6. Hide an arg's controller"}),"\n",(0,t.jsxs)(n.p,{children:["If you wish to hide a certain arg, or I should say a controller for an arg, there's a very easy way to do so. Let's say you have a Component with a prop named ",(0,t.jsx)(n.code,{children:"testId"}),", and you decided you don't need a controller for it.",(0,t.jsx)(n.br,{}),"\n","You have two options as to how you can hide a prop's controller."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["The direct way: using ",(0,t.jsx)(n.code,{children:"meta.argTypes.propName1.table.disable"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The direct way is using the ",(0,t.jsx)(n.code,{children:"meta.argTypes.propName1.table.disable"})," key and provide a boolean false to hide it from view."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// <typeof Button>\n/** @type {import('@storybook/react').Meta} */\nexport default {\n  title: 'Example/Button',\n  component: Button,\n  argTypes: { testId: { table: { disable: true } } },\n};\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["The indirect way: using ",(0,t.jsx)(n.code,{children:"meta.parameters.controls.exclude"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The indirect way is using the ",(0,t.jsx)(n.code,{children:"meta.parameters.controls.exclude"})," key and provide a regex that catches the arg by its name, to hide it from view."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/** @type {import('@storybook/react').Meta} */\nexport default {\n  title: 'Example/Button',\n  component: Button,\n  parameters: {\n    controls: { exclude: /testId/g },\n  },\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"57-storybook-controls",children:"5.7 Storybook Controls"}),"\n",(0,t.jsx)(n.h4,{id:"--introduction",children:"- Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["In this section you'll learn how to write Docs for your components.",(0,t.jsx)(n.br,{}),"\n","Under ",(0,t.jsx)(n.code,{children:"Meta"}),", add an ",(0,t.jsx)(n.code,{children:"argsType"})," key, which should be an object.",(0,t.jsx)(n.br,{}),"\n","Each key under ",(0,t.jsx)(n.code,{children:"argsType"})," is actually ",(0,t.jsx)(n.code,{children:"prop name"})," of your component."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/** @type {import('@storybook/react').Meta<typeof Button>} */\nexport default {\n  title: 'Example/Button',\n  component: Button,\n  parameters: { layout: 'centered' },\n  tags: ['autodocs'],\n  argTypes: {\n    propName1: { ... },\n    propName2: { ... },\n  },\n};\n"})}),"\n",(0,t.jsx)(n.h4,{id:"--adding-docs",children:"- Adding docs"}),"\n",(0,t.jsxs)(n.p,{children:["Every ",(0,t.jsx)(n.code,{children:"prop name"})," cab have basic metadata such as name, description, and defaultValue."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/** @type {import('@storybook/react').Meta<typeof Button>} */\nexport default {\n  title: 'Example/Button',\n  component: Button,\n  parameters: { layout: 'centered' },\n  tags: ['autodocs'],\n  argTypes: {\n    propName1: {\n      name: 'This will replace `propName1`',\n      description: 'This is the description for `propName1`',\n      defaultValue: 111,\n      control: ...,\n     },\n  },\n};\n"})}),"\n",(0,t.jsx)(n.h4,{id:"--choosing-the-control-type",children:"- Choosing the control type"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Control Type 1: ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Provides a toggle for switching between possible states."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  component: Button,\n  argTypes: {\n    propName1: {\n      control: 'boolean'\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Control Type 2: ",(0,t.jsx)(n.code,{children:"text"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Provides a freeform text input."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  component: Button,\n  argTypes: {\n    propName1: 'text',\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Control Type 3: ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Provides a numeric input to include the range of all possible values."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  component: Button,\n  argTypes: {\n    propName1: {\n      control: 'number',\n      min:1,\n      max:30,\n      step: 2,\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Control Type 4: ",(0,t.jsx)(n.code,{children:"range"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Provides a range slider component to include all possible values."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  component: Button,\n  argTypes: {\n    propName1: {\n      control: {\n        type: 'range',\n        min: 1,\n        max: 30,\n        step: 3\n      },\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Control Type 5: ",(0,t.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Provides a JSON-based editor component to handle the object's values.\nAlso allows edition in raw mode. It is also how you handle an array type."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  component: Button,\n  argTypes: {\n    propName1: {\n      control: 'object',\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Control Type 6: ",(0,t.jsx)(n.code,{children:"radio"})," & ",(0,t.jsx)(n.code,{children:"inline-radio"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Provide a set of radio/inline-radio buttons based on the available options."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  component: Button,\n  argTypes: {\n    propName1: {\n      control: 'radio', // <--- or 'inline-radio'\n      options: ['email', 'phone', 'mail'],\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Control Type 7: ",(0,t.jsx)(n.code,{children:"check"})," & ",(0,t.jsx)(n.code,{children:"inline-check"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Provide a set of checkbox components for selecting multiple options."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  component: Button,\n  argTypes: {\n    propName1: {\n      control: 'check', // <--- or 'inline-check'\n      options: ['email', 'phone', 'mail']\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Control Type 8: ",(0,t.jsx)(n.code,{children:"select"})," & ",(0,t.jsx)(n.code,{children:"multi-select"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Provide a drop-down list component to handle single value selection."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  component: Button,\n  argTypes: {\n    propName1: {\n      control: 'select',\n      options: [20, 30, 40, 50],\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"options"})," ",(0,t.jsx)(n.em,{children:"can"})," be renamed to something else by using the ",(0,t.jsx)(n.code,{children:"labels"})," key:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  component: Button,\n  argTypes: {\n      propName1: {\n        options: ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'], // An array of serializable values\n        control: {\n          type: 'select', // Type 'select' is automatically inferred when 'options' is defined\n          labels: {\n            ArrowUp: 'Up',\n            ArrowDown: 'Down',\n            ArrowLeft: 'Left',\n            ArrowRight: 'Right',\n          },\n        },\n      },\n    },\n  }\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Control Type 9: ",(0,t.jsx)(n.code,{children:"color"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Provides a color picker component to handle color values.\nCan be additionally configured to include a set of color presets."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  component: Button,\n  argTypes: {\n    propName1: {\n      control: {\n        type: 'color',\n        presetColors: ['red', 'green', 'blue'],\n      },\n    },\n  },\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Specify initial preset color swatches"})}),"\n",(0,t.jsx)(n.p,{children:"For color controls, you can specify an array of presetColors, either on the control in argTypes, or as a parameter under the controls namespace:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  parameters: {\n    controls: {\n      presetColors: [{ color: '#ff4785', title: 'Coral' }, 'rgba(0, 159, 183, 1)', '#fe4a49'],\n    },\n  },\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"Color presets can be defined as an object with color and title or a simple CSS color string. These will then be available as swatches in the color picker. When you hover over the color swatch, you'll be able to see its title. It will default to the nearest CSS color name if none is specified."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Control Type 10: ",(0,t.jsx)(n.code,{children:"date"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Provides a date-picker component to handle date selection."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  component: Button,\n  argTypes: {\n    propName1: {\n      control: 'date',\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Control Type 11: ",(0,t.jsx)(n.code,{children:"file"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Provides a file input component that returns an array of URLs.\nCan be further customized to accept specific file types."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  component: Button,\n  argTypes: {\n    propName1: {\n      control: {\n        type: 'file',\n        accept: '.png'\n      },\n    },\n  },\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"58-conditional-controls",children:"5.8. Conditional controls"}),"\n",(0,t.jsx)(n.p,{children:"In some cases, it's useful to be able to conditionally exclude a control based on the value of another control. Controls supports basic versions of these use cases with the if, which can take a simple query object to determine whether to include the control."}),"\n",(0,t.jsx)(n.p,{children:'Consider a collection of "advanced" settings that are only visible when the user toggles an "advanced" toggle.'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { Button } from './Button';\n\nexport default {\n  component: Button,\n  argTypes: {\n    label: { control: 'text' }, // Always shows the control\n    advanced: { control: 'boolean' },\n    // Only enabled if advanced is true\n    margin: { control: 'number', if: { arg: 'advanced' } },\n    padding: { control: 'number', if: { arg: 'advanced' } },\n    cornerRadius: { control: 'number', if: { arg: 'advanced' } },\n  },\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"Or consider a constraint where if the user sets one control value, it doesn't make sense for the user to be able to set another value."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { Button } from './Button';\n\nexport default {\n  component: Button,\n  argTypes: {\n    // Button can be passed a label or an image, not both\n    label: {\n      control: 'text',\n      if: { arg: 'image', truthy: false },\n    },\n    image: {\n      control: { type: 'select', options: ['foo.jpg', 'bar.jpg'] },\n      if: { arg: 'label', truthy: false },\n    },\n  },\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"It may also contain at most one of the following operators:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Operator"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Meaning"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"truthy"}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"Is the target value truthy?"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"exists"}),(0,t.jsx)(n.td,{children:"boolean"}),(0,t.jsx)(n.td,{children:"Is the target value defined?"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"eq"}),(0,t.jsx)(n.td,{children:"any"}),(0,t.jsx)(n.td,{children:"Is the target value equal to the provided value?"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"neq"}),(0,t.jsx)(n.td,{children:"any"}),(0,t.jsx)(n.td,{children:"Is the target value NOT equal to the provided value?"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["If no operator is provided, that is equivalent to ",(0,t.jsx)(n.code,{children:"{ truthy: true }"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"6-public---static-serve",children:"6. Public - Static Serve"}),"\n",(0,t.jsx)(n.p,{children:"You may find yourself in need for fetching resources from a public static folder. Storybook allows you to link to static files in your project or stories."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Step 1"}),(0,t.jsx)(n.br,{}),"\n","Either create a folder named ",(0,t.jsx)(n.code,{children:"public"})," inside ",(0,t.jsx)(n.code,{children:".storybook"}),", or use your frontend project's public directory (depending on where your storbook project lives)."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Step 2"}),(0,t.jsx)(n.br,{}),"\n","Go to your ",(0,t.jsx)(n.code,{children:".storybook/main.js"})," file, and add a ",(0,t.jsx)(n.code,{children:"staticDirs"})," key, which accepts an array of strings. Each string is a ",(0,t.jsx)(n.code,{children:"path"})," to a public folder you want to serve."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title=".storybook/main.js"',children:"export default {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  staticDirs: ['../public'], // \ud83d\udc48 Configures the static asset folder in Storybook\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"Another approach is one that allows for renaming of the output folder:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title=".storybook/main.js"',children:"export default {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  staticDirs: [{ from: '../my-custom-assets/images', to: '/assets' }],\n};```\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["We recommend serving assets/resources from the ",(0,t.jsx)(n.code,{children:"public"})," folder inside .",(0,t.jsx)(n.code,{children:".storybook"}),", and not from external resources, to ensure that assets are always available to your stories."]}),"\n",(0,t.jsxs)(n.admonition,{type:"warning",children:[(0,t.jsx)(n.h2,{id:"deprecated",children:"Deprecated"}),(0,t.jsxs)(n.p,{children:["There ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"is"})})," another approach to serving static files but it is deprecated, and that is by using ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"storybook's CLI"})})," with the flag of ",(0,t.jsx)(n.code,{children:"--static-dir"})," or ",(0,t.jsx)(n.code,{children:"-s"}),". What we did above was serving static files via the ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"configuration file"})})," (",(0,t.jsx)(n.code,{children:".storybook/main.js"}),") which replaced the serving of static files using ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"storybook's CLI"})}),". Avoid using it! Also, the ",(0,t.jsx)(n.code,{children:"path"})," you need to mention for the dev script and the path you need to mention for the build script are ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"NOT"})})," the same!!! Each script requires a different path."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "scripts": {\n    "storybook": "storybook dev -p 6006 -s public", // <--- don\'t use this approach\n    "build-storybook": "storybook build -s .storybook/public" // <--- don\'t use this approach\n  }\n}\n'})})]}),"\n",(0,t.jsx)(n.h2,{id:"7-using-decorators-for-context-providers",children:"7. Using Decorators for Context Providers"}),"\n",(0,t.jsx)(n.p,{children:"Decorators are a mechanism to wrap a component in arbitrary markup when rendering a story. Components are often created with assumptions about \u2018where\u2019 they render. Your styles might expect a theme or layout wrapper, or your UI might expect specific context or data providers."}),"\n",(0,t.jsxs)(n.p,{children:["A simple example is adding padding to a component\u2019s stories. Accomplish this using a decorator that wraps the stories in a ",(0,t.jsx)(n.code,{children:"div"})," with padding, like so:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="Button.stories.jsx"',children:"import { Button } from './Button';\n\nexport default {\n  component: Button,\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '3em' }}>\n        {/* \ud83d\udc47 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}\n        <Story />\n      </div>\n    ),\n  ],\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"If a particular story has a problem rendering, often it means your component expects a specific environment is available to the component."}),"\n",(0,t.jsx)(n.p,{children:'A common frontend pattern is for components to assume that they render in a specific "context" with parent components higher up the rendering hierarchy (for instance, theme providers).'}),"\n",(0,t.jsxs)(n.p,{children:['Use decorators to "wrap" every story in the necessary context providers. The ',(0,t.jsx)(n.code,{children:".storybook/preview.js"})," file allows you to customize how components render in Canvas - the preview iframe."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title=".storybook/preview.js"',children:"import React from 'react';\n\nimport { ThemeProvider } from 'styled-components';\n\nexport default {\n  decorators: [\n    (Story) => (\n      <ThemeProvider theme=\"default\">\n        {/* \ud83d\udc47 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}\n        <Story />\n      </ThemeProvider>\n    ),\n  ],\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"Or..."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title=".storybook/preview.js"',children:"import { withThemeByDataAttribute } from '@storybook/addon-themes';\nimport '../styles/tailwind.css';\n\nexport const decorators = [\n  // Applies only if tailwind's darkMode config is set to 'class':\n  // withThemeByClassName({\n  //   themes: { light: 'light', dark: 'dark' },\n  //   defaultTheme: 'light',\n  //   parentSelector: 'body',\n  // }),\n  // Applies only if tailwind's darkMode config is set to ['class', '[data-theme=\"dark\"]']:\n  withThemeByDataAttribute({\n    themes: { light: 'light', dark: 'dark' },\n    defaultTheme: 'light',\n    attributeName: 'data-theme',\n  }),\n];\n\n/** @type { import('@storybook/react').Preview } */\nconst preview = {\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i, // <--- if a react prop name contains these, the selected controller would be a color-picker.\n        date: /Date$/i, // <--- if a react prop name contains this, the selected controller would be a date-picker.\n      },\n    },\n  },\n};\n\nexport default preview;\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"8-levels-of-args",children:["8. Levels of ",(0,t.jsx)(n.code,{children:"args"})]}),"\n",(0,t.jsxs)(n.p,{children:["There are 3 levels of ",(0,t.jsx)(n.code,{children:"args"}),": Story, Component, and Global.",(0,t.jsx)(n.br,{}),"\n","Story level we've already covered, so let's jump into the other two."]}),"\n",(0,t.jsxs)(n.h3,{id:"--component-lvl-args",children:["- Component lvl ",(0,t.jsx)(n.code,{children:"args"})]}),"\n",(0,t.jsxs)(n.p,{children:["You can also define args at the component level; they will apply to all the component's stories unless you overwrite them with story args.\nTo define component args, use the ",(0,t.jsx)(n.code,{children:"args"})," key on the default export:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="Button.stories.jsx"',children:"import { Button } from './Button';\n\nexport default {\n  component: Button,\n  //\ud83d\udc47 Creates specific argTypes\n  argTypes: {\n    backgroundColor: { control: 'color' },\n  },\n  args: {\n    //\ud83d\udc47 Now all Button stories will be primary.\n    primary: true,\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"--global-lvl-args",children:["- Global lvl ",(0,t.jsx)(n.code,{children:"args"})]}),"\n",(0,t.jsxs)(n.p,{children:["You can also define args at the global level; they will apply to every component's stories unless you overwrite them. To do so, define the ",(0,t.jsx)(n.code,{children:"args"})," property in the default export of ",(0,t.jsx)(n.code,{children:"preview.js"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="Button.stories.jsx"',children:"export default {\n  // The default value of the theme arg for all stories\n  args: { theme: 'light' },\n};\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"For most uses of global args, globals are a better tool for defining globally-applied settings, such as a theme. Using globals enables users to change the value with the toolbar menu."})}),"\n",(0,t.jsx)(n.h2,{id:"9-override-theme-on-the-component-level",children:"9. Override theme on the component level"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="Button.stories.jsx"',children:"export default {\n  parameters: {\n    themes: {\n      themeOverride: 'light', // component level override\n    },\n  },\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"10-loaders",children:"10. Loaders"}),"\n",(0,t.jsx)(n.p,{children:"Loaders are asynchronous functions that load data for a story and its decorators. A story's loaders run before the story renders, and the loaded data injected into the story via its render context."}),"\n",(0,t.jsx)(n.p,{children:"Loaders can be used to load any asset, lazy load components, or fetch data from a remote API. This feature was designed as a performance optimization to handle large story imports. However, args is the recommended way to manage story data. We're building up an ecosystem of tools and techniques around Args that might not be compatible with loaded data."}),"\n",(0,t.jsx)(n.p,{children:"They are an advanced feature (i.e., escape hatch), and we only recommend using them if you have a specific need that other means can't fulfill."}),"\n",(0,t.jsx)(n.p,{children:"Stories are isolated component examples that render internal data defined as part of the story or alongside the story as args."}),"\n",(0,t.jsx)(n.p,{children:"Loaders are helpful when you need to load story data externally (e.g., from a remote API). Consider the following example that fetches a todo item to display in a todo list:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="TodoItem.stories.jsx"',children:"import { TodoItem } from './TodoItem';\n\nexport default {\n  component: TodoItem,\n  render: (args, { loaded: { todo } }) => <TodoItem {...args} {...todo} />,\n};\n\nexport const Primary = {\n  loaders: [\n    async () => {\n      // Servier-side code here!!!\n      const data = await fetch('https://jsonplaceholder.typicode.com/todos/1').then((response) => response.json());\n\n      return { todo: data }\n    },\n  ],\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Global Loaders"})}),"\n",(0,t.jsxs)(n.p,{children:["We can also set a loader for ",(0,t.jsx)(n.strong,{children:"all stories"})," via the loaders export of your .storybook/preview.js file (this is the file where you configure all stories):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  loaders: [\n    async () => ({\n      currentUser: await (await fetch('https://jsonplaceholder.typicode.com/users/1')).json(),\n    }),\n  ],\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"999-misc",children:"999 Misc"}),"\n",(0,t.jsx)(n.p,{children:'The "Docs" page displays auto-generated documentation for components (inferred from the source code). Usage documentation is helpful when sharing reusable components with your team, for example, in an application.'}),"\n",(0,t.jsx)(n.p,{children:"#NOTE!!!\ndecorators & render does not work in .js files."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"decorators"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n  decorators: [\n    (Story) => (\n      <div style={{ margin: '0', padding: '1em', border: '1px solid black' }}>\n        {/* \ud83d\udc47 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}\n        <Story />\n      </div>\n    ),\n  ],\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"sorting your stories"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import '../styles/tailwind.css';\n\n/** @type { import('@storybook/react').Preview } */\nconst preview = {\n  parameters: {\n    options: {\n      // The `a` and `b` arguments in this function have a type of `import('@storybook/types').IndexEntry`. Remember that the function is executed in a JavaScript environment, so use JSDoc for IntelliSense to introspect it.\n      storySort: (a, b) => (a.id === b.id ? 0 : a.id.localeCompare(b.id, undefined, { numeric: true })),\n    },\n  },\n};\n\nexport default preview;\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"24-actions-to-enhance-args",children:"2.4. Actions to enhance args"}),"\n",(0,t.jsxs)(n.p,{children:["Addons can enhance args. For instance, ",(0,t.jsx)(n.a,{href:"https://storybook.js.org/docs/essentials/actions",children:"Actions"})," auto-detects which args are callbacks and appends a logging function to them. That way, interactions (like clicks) get logged in the actions panel."]}),"\n",(0,t.jsx)(n.h2,{id:"25-using-the-play-function",children:"2.5. Using the play function"}),"\n",(0,t.jsx)(n.p,{children:"... complete this part..."}),"\n",(0,t.jsxs)(n.p,{children:["Storybook's play function and the ",(0,t.jsx)(n.a,{href:"https://storybook.js.org/addons/@storybook/addon-interactions",children:"@storybook/addon-interactions"})," are convenient helper methods to test component scenarios that otherwise require user intervention. They're small code snippets that execute once your story renders. For example, suppose you wanted to validate a form component, you could write the following story using the play function to check how the component responds when filling in the inputs with information:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="LoginForm.stories.jsx"',children:"import { userEvent, within } from '@storybook/testing-library';\n\nimport { expect } from '@storybook/jest';\n\nimport { LoginForm } from './LoginForm';\n\nexport default {\n  component: LoginForm,\n};\n\nexport const EmptyForm = {};\n\nexport const FilledForm = {\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n\n    // \ud83d\udc47 Simulate interactions with the component\n    await userEvent.type(canvas.getByTestId('email'), 'email@provider.com');\n\n    await userEvent.type(canvas.getByTestId('password'), 'a-random-password');\n\n    // See https://storybook.js.org/docs/essentials/actions#automatically-matching-args to learn how to setup logging in the Actions panel\n    await userEvent.click(canvas.getByRole('button'));\n\n    // \ud83d\udc47 Assert DOM structure\n    await expect(\n      canvas.getByText(\n        'Everything is perfect. Your account is ready and we should probably get you started!'\n      )\n    ).toBeInTheDocument();\n  },\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"Without the help of the play function and the @storybook/addon-interactions, you had to write your own stories and manually interact with the component to test out each use case scenario possible."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"add background options to storybook"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { withThemeByDataAttribute } from '@storybook/addon-themes';\nimport '../styles/tailwind.css';\n// import 'tailwindcss/tailwind.css'; <--- an index.css file from tailwind inside node-modules, which only contains the 3 lines.\n\nexport const decorators = [\n  // Applies only if tailwind's darkMode config is set to 'class':\n  // withThemeByClassName({\n  //   themes: { light: 'light', dark: 'dark' },\n  //   defaultTheme: 'light',\n  //   parentSelector: 'body',\n  // }),\n  // Applies only if tailwind's darkMode config is set to ['class', '[data-theme=\"dark\"]']:\n  withThemeByDataAttribute({\n    themes: { light: 'light', dark: 'dark' },\n    defaultTheme: 'light',\n    attributeName: 'data-theme',\n  }),\n];\n\n/** @type { import('@storybook/react').Preview } */\nconst preview = {\n  parameters: {\n    backgrounds: {\n      default: 'Twitter',\n      values: [\n        { name: 'Twitter', value: '#00aced' },\n        { name: 'Facebook', value: '#3b5998' },\n        { name: 'White', value: '#fff' },\n        { name: 'Black', value: '#000' },\n      ],\n    },\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i, // <--- if a react prop name contains these, the selected controller would be a color-picker.\n        date: /Date$/i, // <--- if a react prop name contains this, the selected controller would be a date-picker.\n      },\n    },\n    docs: {\n      // `toc` Accepts `true` or an object. Generates a table-of-content on the side of the Docs page of each component. Defaults to false.\n      toc: {\n        disable: false,\n        title: 'Table of Contents', // <--- give it a title. Defaults to nothing being displayed.\n        headingSelector: 'h2, h3', // <--- Defines the list of headings to feature in the table of contents.\n        // ignoreSelector: 'h1', // <--- or '#primary',\n        // unsafeTocbotOptions: { orderedList: true },\n      },\n    },\n  },\n};\n\nexport default preview;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can also define backgrounds per-component or per-story basis through parameter inheritance. It's the same ",(0,t.jsx)(n.code,{children:"parameters"})," key after all."]}),"\n",(0,t.jsx)(n.p,{children:"If for some weird reason you want to disable a background on a specific story, you can do it like so:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { Button } from './Button';\n\nexport const Large = { parameters: { backgrounds: { disable: true } } };\n\nexport default { component: Button };\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["You also have control over the grid coming from the grid addon.",(0,t.jsx)(n.br,{}),"\n","The default values of the grid are:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import '../styles/tailwind.css';\n\n/** @type { import('@storybook/react').Preview } */\nconst preview = {\n  parameters: {\n    backgrounds: {\n      grid: {\n        cellSize: 20,\n        opacity: 0.5,\n        cellAmount: 5,\n        offsetX: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'\n        offsetY: 16, // Default is 0 if story has 'fullscreen' layout, 16 if layout is 'padded'\n      },\n    },\n  },\n};\n\nexport default preview;\n"})}),"\n",(0,t.jsx)(n.p,{children:"If for some weird reason you want to disable the grid for a specific Story you can do so like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { Button } from './Button';\n\nexport const Large = {\n  parameters: {\n    backgrounds: {\n      grid: { disable: true },\n    },\n  },\n};\n\nexport default { component: Button };\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},5710:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>i});var t=o(758);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);