"use strict";(self.webpackChunkdocusaurus_guides=self.webpackChunkdocusaurus_guides||[]).push([[2546],{2931:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"programming/javascript/valueOf","title":"valueOf","description":"Description","source":"@site/docs/programming/javascript/valueOf.md","sourceDirName":"programming/javascript","slug":"/programming/javascript/valueOf","permalink":"/guides/docs/programming/javascript/valueOf","draft":false,"unlisted":false,"editUrl":"https://github.com/talkohavy/guides/docs/programming/javascript/valueOf.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mySidebar","previous":{"title":"- Prototype","permalink":"/guides/docs/programming/javascript/prototype"},"next":{"title":"- FinalizationRegistry","permalink":"/guides/docs/programming/javascript/finalization-registry"}}');var r=i(6070),s=i(7010);const o={},c="valueOf",l={},d=[{value:"Description",id:"description",level:2},{value:"When is it called?",id:"when-is-it-called",level:2},{value:"Important to know",id:"important-to-know",level:2},{value:"Using unary plus (+) on objects",id:"using-unary-plus--on-objects",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"valueof",children:"valueOf"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(n.p,{children:["JavaScript calls the ",(0,r.jsx)(n.code,{children:"valueOf"})," method to convert an object to a primitive value. You rarely need to invoke the ",(0,r.jsx)(n.code,{children:"valueOf"})," method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"valueOf()"})," method of Object instances converts the this value to an object. This method is meant to be overridden by derived objects for custom type conversion logic."]}),"\n",(0,r.jsx)(n.h2,{id:"when-is-it-called",children:"When is it called?"}),"\n",(0,r.jsx)(n.p,{children:"The valueOf method is called:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When using any of these comparisons operators: ",(0,r.jsx)(n.code,{children:"=="}),", ",(0,r.jsx)(n.code,{children:"<"}),", ",(0,r.jsx)(n.code,{children:">"}),", ",(0,r.jsx)(n.code,{children:"=<"}),", ",(0,r.jsx)(n.code,{children:"<="}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["When using arithmetic operators: ",(0,r.jsx)(n.code,{children:"+"}),", ",(0,r.jsx)(n.code,{children:"-"}),", ",(0,r.jsx)(n.code,{children:"*"}),", ",(0,r.jsx)(n.code,{children:"/"}),", ",(0,r.jsx)(n.code,{children:"^"}),", ",(0,r.jsx)(n.code,{children:"%"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["When using bitwise operators: ",(0,r.jsx)(n.code,{children:"|"}),", ",(0,r.jsx)(n.code,{children:"&"}),", ",(0,r.jsx)(n.code,{children:"^"}),", ",(0,r.jsx)(n.code,{children:"~"}),", ",(0,r.jsx)(n.code,{children:"<<"}),", ",(0,r.jsx)(n.code,{children:">>"}),", ",(0,r.jsx)(n.code,{children:">>>"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["When calling ",(0,r.jsx)(n.code,{children:"Number"})," with/without ",(0,r.jsx)(n.code,{children:"new"}),": ",(0,r.jsx)(n.code,{children:"Number(a)"}),", ",(0,r.jsx)(n.code,{children:"new Number(a)"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["When any of: ",(0,r.jsx)(n.code,{children:"Math.min"}),", ",(0,r.jsx)(n.code,{children:"Math.max"}),", ",(0,r.jsx)(n.code,{children:"Math.abs"}),", ... , etc."]}),"\n",(0,r.jsxs)(n.li,{children:["When using the unary plus sign: ",(0,r.jsx)(n.code,{children:"+"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["When you explicitly call it: ",(0,r.jsx)(n.code,{children:"obj.valueOf();"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"important-to-know",children:"Important to know"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"Object.prototype.valueOf()"})," base implementation is deliberately useless: by returning an object, its return value will never be used by any primitive conversion algorithm."]}),"\n",(0,r.jsx)(n.li,{children:"Many built-in objects override this method to return an appropriate primitive value."}),"\n",(0,r.jsxs)(n.li,{children:["When you create a custom object, you can override ",(0,r.jsx)(n.code,{children:"valueOf()"})," to call a custom method, so that your custom object can be converted to a primitive value."]}),"\n",(0,r.jsxs)(n.li,{children:["Generally, ",(0,r.jsx)(n.code,{children:"valueOf()"})," is used to return a value that is most meaningful for the object \u2014 unlike ",(0,r.jsx)(n.code,{children:"toString()"}),", it does not need to be a string."]}),"\n",(0,r.jsxs)(n.li,{children:["Alternatively, you can add a ",(0,r.jsx)(n.code,{children:"[Symbol.toPrimitive]()"})," method, which allows even more control over the conversion process."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"[Symbol.toPrimitive]"})," ",(0,r.jsx)(n.strong,{children:"will always be preferred"})," over ",(0,r.jsx)(n.code,{children:"valueOf"})," or ",(0,r.jsx)(n.code,{children:"toString"})," for any type conversion."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"using-unary-plus--on-objects",children:"Using unary plus (+) on objects"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Unary plus performs ",(0,r.jsx)(n.code,{children:"number coercion"})," on its operand."]}),"\n",(0,r.jsxs)(n.li,{children:["If an object has ",(0,r.jsx)(n.code,{children:"[Symbol.toPrimitive]()"}),", then it would be called (minus the exception of: ",(0,r.jsx)(n.code,{children:"Date"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Otherwise, it means calling the object's ",(0,r.jsx)(n.code,{children:"valueOf()"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If the object doesn't have a custom ",(0,r.jsx)(n.code,{children:"valueOf()"})," method, the base implementation of ",(0,r.jsx)(n.code,{children:"valueOf()"})," will be ignored and the return value of ",(0,r.jsx)(n.code,{children:"toString()"})," to be used instead."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'+new Date(); // the current timestamp; same as new Date().getTime()\n+{}; // NaN (toString() returns "[object Object]")\n+[]; // 0 (toString() returns an empty string list)\n+[1]; // 1 (toString() returns "1")\n+[1, 2]; // NaN (toString() returns "1,2")\n+new Set([1]); // NaN (toString() returns "[object Set]")\n+{ valueOf: () => 42 }; // 42\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},7010:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var t=i(758);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);