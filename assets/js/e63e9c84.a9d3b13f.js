"use strict";(self.webpackChunkdocusaurus_guides=self.webpackChunkdocusaurus_guides||[]).push([[4990],{1160:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>t});const i=JSON.parse('{"id":"programming/git","title":"Guide for Git","description":"Git Commands","source":"@site/docs/programming/git.md","sourceDirName":"programming","slug":"/programming/git","permalink":"/guides/docs/programming/git","draft":false,"unlisted":false,"editUrl":"https://github.com/talkohavy/guides/docs/programming/git.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mySidebar","previous":{"title":"- ELK Stack","permalink":"/guides/docs/programming/elk"},"next":{"title":"- Helm","permalink":"/guides/docs/programming/helm"}}');var a=s(6070),l=s(7010);const c={},r="Guide for Git",o={},t=[{value:"Git Commands",id:"git-commands",level:2},{value:"- Command 1: remote",id:"--command-1-remote",level:3},{value:"Description",id:"description",level:4},{value:"Use Cases",id:"use-cases",level:4},{value:"- Command 2: config",id:"--command-2-config",level:3},{value:"Description",id:"description-1",level:4},{value:"Use Cases",id:"use-cases-1",level:4},{value:"- Command 3: branch",id:"--command-3-branch",level:3},{value:"Use Cases",id:"use-cases-2",level:4},{value:"- Command 4: checkout",id:"--command-4-checkout",level:3},{value:"Description",id:"description-2",level:4},{value:"Use Cases",id:"use-cases-3",level:4},{value:"- Command 5: clean",id:"--command-5-clean",level:3},{value:"Use Cases",id:"use-cases-4",level:4},{value:"- Command 6: commit",id:"--command-6-commit",level:3},{value:"Use Cases",id:"use-cases-5",level:4},{value:"- Command 7: filter-branch",id:"--command-7-filter-branch",level:3},{value:"Use Cases",id:"use-cases-6",level:4},{value:"All paths to .gitconfig",id:"all-paths-to-gitconfig",level:2},{value:"Cool diff tool <code>git-split-diffs</code>",id:"cool-diff-tool-git-split-diffs",level:2}];function d(e){const n={admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"guide-for-git",children:"Guide for Git"})}),"\n",(0,a.jsx)(n.h2,{id:"git-commands",children:"Git Commands"}),"\n",(0,a.jsx)(n.h3,{id:"--command-1-remote",children:"- Command 1: remote"}),"\n",(0,a.jsx)(n.h4,{id:"description",children:"Description"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"remote"})," sub-command has 3 useful sub-commands:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"add"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"remove"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"set-url"})}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"add"})," command fails when ",(0,a.jsx)(n.code,{children:"name"})," already exists.\nThe ",(0,a.jsx)(n.code,{children:"set-url"})," command fails when ",(0,a.jsx)(n.code,{children:"name"})," doesn't exist."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"set-url"})," command is useful in cases you made a typo on the ",(0,a.jsx)(n.code,{children:"URL"})," of some existing ",(0,a.jsx)(n.code,{children:"name"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"origin"})," is the default name of your remote git, and is selected by default when you run a ",(0,a.jsx)(n.code,{children:"git push"})," or ",(0,a.jsx)(n.code,{children:"git pull"}),". This means you're basically running ",(0,a.jsx)(n.code,{children:"git push origin"})," behind the scenes."]}),"\n",(0,a.jsx)(n.h4,{id:"use-cases",children:"Use Cases"}),"\n",(0,a.jsx)(n.p,{children:"List all remote urls:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git remote -v\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Remove a remote by ",(0,a.jsx)(n.code,{children:"name"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git remote rm origin\n"})}),"\n",(0,a.jsx)(n.p,{children:"Or..."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git remote remove origin\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Add new remote origin url:",(0,a.jsx)(n.br,{}),"\n","(provide a ",(0,a.jsx)(n.code,{children:"name"})," & a ",(0,a.jsx)(n.code,{children:"URL"}),". If ",(0,a.jsx)(n.code,{children:"name"})," already exists, throws an error)"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git remote add origin PASTE_URL_HERE\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Update current existing remote origin by name url:",(0,a.jsx)(n.br,{}),"\n","(provide a ",(0,a.jsx)(n.code,{children:"name"})," & a ",(0,a.jsx)(n.code,{children:"URL"}),". If ",(0,a.jsx)(n.code,{children:"name"})," doesn't exist, throws an error)"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git remote set-url origin PASTE_URL_HERE\n"})}),"\n",(0,a.jsx)(n.h3,{id:"--command-2-config",children:"- Command 2: config"}),"\n",(0,a.jsx)(n.h4,{id:"description-1",children:"Description"}),"\n",(0,a.jsxs)(n.p,{children:["You can use the config command to set up things like the ",(0,a.jsx)(n.code,{children:"user.name"}),", ",(0,a.jsx)(n.code,{children:"user.email"}),". And why should you care about the user & email? Because without a user & an email ",(0,a.jsx)(n.strong,{children:"you cannot perform commits"}),"!"]}),"\n",(0,a.jsx)(n.h4,{id:"use-cases-1",children:"Use Cases"}),"\n",(0,a.jsx)(n.p,{children:"Get current remote origin url:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git config --get remote.origin.url\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Get git user ",(0,a.jsx)(n.code,{children:"name"})," & ",(0,a.jsx)(n.code,{children:"email"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# - Level 1: Project Level\ngit config --get user.name\ngit config --get user.email\n\n# - Level 2: Global Level\ngit config --global --get user.name\ngit config --global --get user.email\n\n# - Level 3: System Level\ngit config --system --get user.name\ngit config --system --get user.email\n"})}),"\n",(0,a.jsx)(n.p,{children:"Update git user name & email at the project:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'git config user.name "Tal Kohavy"\ngit config user.email talkohavy@gmail.com\n'})}),"\n",(0,a.jsx)(n.p,{children:"In order to set new values use:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# - Level 1: Project Level\ngit config user.name "Tal Kohavy"\ngit config user.email "talkohavy@gmail.com"\n\n# - Level 2: Global Level\ngit config --global user.name "Tal Kohavy"\ngit config --global user.email "talkohavy@gmail.com"\n\n# - Level 3: System Level\ngit config --system user.name "Tal Kohavy"\ngit config --system user.email "talkohavy@gmail.com"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Create an alias for a git command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'git config --global alias.logs "log --graph --oneline --decorate"\ngit logs\n\ngit config --global alias.ck "checkout"\ngit ck\n\ngit config --global alias.pop "stash pop"\ngit pop\n\ngit config --global alias.pop "stash apply"\ngit apply\n\ngit config --global alias.name "rev-parse --abbrev-ref HEAD"\ngit name\n'})}),"\n",(0,a.jsx)(n.h3,{id:"--command-3-branch",children:"- Command 3: branch"}),"\n",(0,a.jsx)(n.h4,{id:"use-cases-2",children:"Use Cases"}),"\n",(0,a.jsx)(n.p,{children:"Delete a local branch:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git branch --delete NAME_OF_BRANCH\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsxs)(n.p,{children:["You ",(0,a.jsx)(n.strong,{children:"can't"})," delete the branch on which you're current standing on!",(0,a.jsx)(n.br,{}),"\n","Check out from it if necessary."]})}),"\n",(0,a.jsx)(n.p,{children:"Delete a remote branch:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git push origin :REMOTE_BRANCH_NAME\n"})}),"\n",(0,a.jsx)(n.p,{children:"Rename a local branch:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git branch -m OLD_BRANCH_NAME NEW_BRANCH_NAME\n"})}),"\n",(0,a.jsx)(n.p,{children:"Or just..."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git branch -m NEW_BRANCH_NAME\n"})}),"\n",(0,a.jsx)(n.p,{children:"Rename a remote branch:"}),"\n",(0,a.jsxs)(n.p,{children:["Renaming a remote branch is actually a 2-step process. While you ",(0,a.jsx)(n.em,{children:"can"})," actually rename a remote branch using Github Browser in a 1-step, this is probably not what you want. Because, here is what I'm assuming that happened:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"You gave a wrong name to a local branch."}),"\n",(0,a.jsx)(n.li,{children:"You pushed that branch with the wrong name to the remote repo."}),"\n",(0,a.jsx)(n.li,{children:"You now want to renamed in both places."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The easiest & fastest way to do that is:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"rename the local branch."}),"\n",(0,a.jsx)(n.li,{children:"delete the remote branch."}),"\n",(0,a.jsx)(n.li,{children:"push the newly-named local branch to the remote."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Step 1: rename the local branch"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git branch -m NEW_BRANCH_NAME\n"})}),"\n",(0,a.jsx)(n.p,{children:"Step 2: delete the remote branch"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git push origin :OLD_BRANCH_NAME\n"})}),"\n",(0,a.jsx)(n.p,{children:"Step 3: push the newly-named branch to the remote branch"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git push origin NEW_BRANCH_NAME\n"})}),"\n",(0,a.jsx)(n.h3,{id:"--command-4-checkout",children:"- Command 4: checkout"}),"\n",(0,a.jsx)(n.h4,{id:"description-2",children:"Description"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"checkout"})," has many actions attached to it. Use it carefully."]}),"\n",(0,a.jsx)(n.h4,{id:"use-cases-3",children:"Use Cases"}),"\n",(0,a.jsx)(n.p,{children:"Reset 1 file:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git checkout HEAD -- src/client.js\n"})}),"\n",(0,a.jsx)(n.p,{children:"Branch out from an old commit"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git checkout -B <branch-name> <sha-of-commit>\n"})}),"\n",(0,a.jsx)(n.p,{children:"or..."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git checkout -B <branch-name> HEAD~3\n"})}),"\n",(0,a.jsx)(n.h3,{id:"--command-5-clean",children:"- Command 5: clean"}),"\n",(0,a.jsx)(n.h4,{id:"use-cases-4",children:"Use Cases"}),"\n",(0,a.jsx)(n.p,{children:"Clean reset for all changes:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git clean -df\n"})}),"\n",(0,a.jsx)(n.h3,{id:"--command-6-commit",children:"- Command 6: commit"}),"\n",(0,a.jsx)(n.h4,{id:"use-cases-5",children:"Use Cases"}),"\n",(0,a.jsx)(n.p,{children:"amend wrong author:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'git commit --amend --author "Tal Kohavy <talkohavy@gmail.com>"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"--command-7-filter-branch",children:"- Command 7: filter-branch"}),"\n",(0,a.jsx)(n.h4,{id:"use-cases-6",children:"Use Cases"}),"\n",(0,a.jsx)(n.p,{children:"amend wrong author on all commits:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'git filter-branch --env-filter \'\nOLD_EMAIL="wrong@mail.com"\nNEW_EMAIL="talkohavy@gmail.com"\nif [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]\nthen\n    export GIT_COMMITTER_EMAIL="$NEW_EMAIL"\nfi\nif [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]\nthen\n    export GIT_AUTHOR_EMAIL="$NEW_EMAIL"\nfi\n\' --tag-name-filter cat -- --branches --tags\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"all-paths-to-gitconfig",children:"All paths to .gitconfig"}),"\n",(0,a.jsxs)(n.p,{children:["There are 3 Levels of ",(0,a.jsx)(n.code,{children:".gitconfig"}),": ",(0,a.jsx)(n.code,{children:"project"}),", ",(0,a.jsx)(n.code,{children:"global"})," & ",(0,a.jsx)(n.code,{children:"system"}),".",(0,a.jsx)(n.br,{}),"\n","The .gitconfig, on all operating machines, is found at:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# - Project Level\ncode .git/config\n\n# - Global Level\ncode ~/.gitconfig\n\n# - System Level (What about windows?)\ncode /etc/gitconfig\n"})}),"\n",(0,a.jsxs)(n.p,{children:["I always use the gitconfig in the ",(0,a.jsx)(n.code,{children:"global"})," level.",(0,a.jsx)(n.br,{}),"\n",'That\'s where I usually put my "globally" configs.',(0,a.jsx)(n.br,{}),"\n","So like ",(0,a.jsx)(n.code,{children:"user.name"}),", ",(0,a.jsx)(n.code,{children:"user.email"}),", all of my ",(0,a.jsx)(n.code,{children:"aliases"}),", the ",(0,a.jsx)(n.code,{children:"git-split-diffs"}),", etc."]}),"\n",(0,a.jsx)(n.p,{children:"As of today, here's how my .gitconfig looks:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"[alias]\n\tlogs = log --graph --oneline --decorate\n\tdf = diff HEAD\n\tck = checkout\n\tpop = stash pop\n\tapply = stash apply\n\tname = rev-parse --abbrev-ref HEAD\n\tunstage = restore --staged .\n\ts = status\n\tcomit = commit\n\tamend = commit --amend --no-edit\n[user]\n\tname = Tal Kohavy\n\temail = talkohavy@gmail.com\n[core]\n\tpager = git-split-diffs --color | less -RF\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.h2,{id:"cool-diff-tool-git-split-diffs",children:["Cool diff tool ",(0,a.jsx)(n.code,{children:"git-split-diffs"})]}),"\n",(0,a.jsx)(n.p,{children:"Get the the most powerful syntax highlighting git-diff in your terminal.\nIt is GitHub style, with split view (side by side)."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'npm install -g git-split-diffs\n\ngit config --global core.pager "git-split-diffs --color | less -RFX"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Enable scrolling in the terminal:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'git config --global core.pager "git-split-diffs --color | less -+LFX"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Narrow terminals:"}),"\n",(0,a.jsxs)(n.p,{children:["Split diffs can be hard to read on narrow terminals, so we revert to unified diffs if we cannot fit two lines of ",(0,a.jsx)(n.code,{children:"min-line-width"})," on screen. This value is configurable:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git config --global split-diffs.min-line-width 40\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This defaults to ",(0,a.jsx)(n.code,{children:"80"}),", so screens below ",(0,a.jsx)(n.code,{children:"160"})," characters will display unified diffs. Set it to ",(0,a.jsx)(n.code,{children:"0"})," to always show split diffs."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},7010:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>r});var i=s(758);const a={},l=i.createContext(a);function c(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);