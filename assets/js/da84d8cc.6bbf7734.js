"use strict";(self.webpackChunkdocusaurus_guides=self.webpackChunkdocusaurus_guides||[]).push([[8812],{9780:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"programming/concepts/solid","title":"SOLID","description":"An acronym for 5 design principles in software engineering.","source":"@site/docs/programming/concepts/solid.md","sourceDirName":"programming/concepts","slug":"/programming/concepts/solid","permalink":"/guides/docs/programming/concepts/solid","draft":false,"unlisted":false,"editUrl":"https://github.com/talkohavy/guides/docs/programming/concepts/solid.md","tags":[],"version":"current","frontMatter":{"slug":"solid"},"sidebar":"mySidebar","previous":{"title":"- Software Concepts","permalink":"/guides/docs/software-concepts"},"next":{"title":"-- Design By Contract","permalink":"/guides/docs/programming/concepts/design-by-contract"}}');var i=t(6070),r=t(7010);const o={slug:"solid"},c="SOLID",d={},l=[{value:"- <code>Definition</code>",id:"--definition",level:2},{value:"- <code>Breakdown of the Acronym</code>",id:"--breakdown-of-the-acronym",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"solid",children:"SOLID"})}),"\n",(0,i.jsxs)("font",{size:"4",children:["An acronym for ",(0,i.jsx)("strong",{children:"5 design principles"})," in software engineering."]}),"\n",(0,i.jsxs)(n.h2,{id:"--definition",children:["- ",(0,i.jsx)(n.code,{children:"Definition"})]}),"\n",(0,i.jsx)(n.p,{children:"In software engineering, SOLID is an acronym for five design principles intended to make object-oriented designs more understandable, flexible, and maintainable."}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.h2,{id:"--breakdown-of-the-acronym",children:["- ",(0,i.jsx)(n.code,{children:"Breakdown of the Acronym"})]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Letter"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Meaning"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)("font",{size:"6",children:(0,i.jsx)("span",{style:{color:"red"},children:"S"})})})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The ",(0,i.jsx)(n.strong,{children:"Single Responsibility"})," principle says that ",(0,i.jsx)(n.em,{children:"Every class should have only one responsibility"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)("font",{size:"6",children:(0,i.jsx)("span",{style:{color:"red"},children:"O"})})})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The ",(0,i.jsx)(n.strong,{children:"Open-Closed"})," principle says that ",(0,i.jsx)(n.em,{children:"Software entities should be open for extension, but closed for modification"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)("font",{size:"6",children:(0,i.jsx)("span",{style:{color:"red"},children:"L"})})})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The ",(0,i.jsx)(n.strong,{children:"Liskov Substitution"})," principle says that ",(0,i.jsx)(n.em,{children:"Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it"}),". See also ",(0,i.jsx)(n.a,{href:"/docs/programming/concepts/design-by-contract",title:"Go to Design by Contract guide",children:"design by contract"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)("font",{size:"6",children:(0,i.jsx)("span",{style:{color:"red"},children:"I"})})})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The ",(0,i.jsx)(n.strong,{children:"Interface Segregation"})," principle says that ",(0,i.jsx)(n.em,{children:"Clients should not be forced to depend upon interfaces that they do not use"}),'".']})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)("font",{size:"6",children:(0,i.jsx)("span",{style:{color:"red"},children:"D"})})})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The ",(0,i.jsx)(n.strong,{children:"Dependency Inversion"})," principle instructs you to ",(0,i.jsx)(n.em,{children:"Depend upon abstractions, not concretions"}),"."]})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Although the SOLID principles apply to any object-oriented design, they can also form a core philosophy for methodologies such as agile development or adaptive software development."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},7010:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(758);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);