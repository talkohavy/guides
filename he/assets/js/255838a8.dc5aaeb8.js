"use strict";(self.webpackChunkdocusaurus_guides=self.webpackChunkdocusaurus_guides||[]).push([[6429],{1872:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"programming/javascript/iterator","title":"Iterator","description":"An iterator in JavaScript is an object that allows you to traverse through a collection (like an array, string, or custom data structure) one element at a time. It follows a specific protocol called the iterator protocol.","source":"@site/docs/programming/javascript/iterator.md","sourceDirName":"programming/javascript","slug":"/programming/javascript/iterator","permalink":"/guides/he/docs/programming/javascript/iterator","draft":false,"unlisted":false,"editUrl":"https://github.com/talkohavy/guides/docs/programming/javascript/iterator.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mySidebar","previous":{"title":"- Call, Apply & Bind","permalink":"/guides/he/docs/programming/javascript/call-apply-bind"},"next":{"title":"- Strict Mode","permalink":"/guides/he/docs/programming/javascript/strict-mode"}}');var o=r(6070),a=r(7010);const i={},l="Iterator",s={},c=[{value:"1. Iterator Protocol",id:"1-iterator-protocol",level:2},{value:"2. How Iterators Work",id:"2-how-iterators-work",level:2},{value:"3. Built-In Iterators",id:"3-built-in-iterators",level:2},{value:"4. Iterating with for...of",id:"4-iterating-with-forof",level:2},{value:"5. Custom Iterable Objects",id:"5-custom-iterable-objects",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"iterator",children:"Iterator"})}),"\n",(0,o.jsx)(t.p,{children:"An iterator in JavaScript is an object that allows you to traverse through a collection (like an array, string, or custom data structure) one element at a time. It follows a specific protocol called the iterator protocol."}),"\n",(0,o.jsx)(t.h2,{id:"1-iterator-protocol",children:"1. Iterator Protocol"}),"\n",(0,o.jsxs)(t.p,{children:["An object is an iterator if it implements a ",(0,o.jsx)(t.code,{children:"next()"})," method, which returns an object with two properties:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"value: The next value in the iteration sequence."}),"\n",(0,o.jsx)(t.li,{children:"done: A boolean that indicates whether the iteration is complete (true if there are no more values to iterate over, false otherwise)."}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"2-how-iterators-work",children:"2. How Iterators Work"}),"\n",(0,o.jsx)(t.p,{children:"Here's a basic example of an iterator:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"function createIterator(array) {\n  let index = 0;\n\n  return {\n    next() {\n      if (index < array.length) {\n        return { value: array[index++], done: false };\n      } else {\n        return { value: undefined, done: true };\n      }\n    },\n  };\n}\n\nconst iterator = createIterator(['a', 'b', 'c']);\n\nconsole.log(iterator.next()); // { value: 'a', done: false }\nconsole.log(iterator.next()); // { value: 'b', done: false }\nconsole.log(iterator.next()); // { value: 'c', done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n"})}),"\n",(0,o.jsx)(t.h2,{id:"3-built-in-iterators",children:"3. Built-In Iterators"}),"\n",(0,o.jsx)(t.p,{children:"JavaScript provides built-in iterators for iterable objects like:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Arrays"}),"\n",(0,o.jsx)(t.li,{children:"Strings"}),"\n",(0,o.jsx)(t.li,{children:"Maps"}),"\n",(0,o.jsx)(t.li,{children:"Sets"}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["You can use the ",(0,o.jsx)(t.code,{children:"Symbol.iterator"})," to access these built-in iterators. For example:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"const array = [1, 2, 3];\nconst iterator = array[Symbol.iterator]();\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n"})}),"\n",(0,o.jsx)(t.h2,{id:"4-iterating-with-forof",children:"4. Iterating with for...of"}),"\n",(0,o.jsx)(t.p,{children:"Iterators are typically used implicitly in JavaScript with the for...of loop:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"for (const value of ['x', 'y', 'z']) {\n  console.log(value); // output: x, y, z\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"5-custom-iterable-objects",children:"5. Custom Iterable Objects"}),"\n",(0,o.jsx)(t.p,{children:"You can make your own objects iterable by implementing the iterator protocol using the Symbol.iterator property:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"const iterableObject = {\n  data: ['hello', 'world'],\n  [Symbol.iterator]() {\n    let index = 0;\n    return {\n      next: () => {\n        if (index < this.data.length)\n          return {\n            value: this.data[index++],\n            done: false,\n          };\n\n        return { value: undefined, done: true };\n      },\n    };\n  },\n};\n\nfor (const value of iterableObject) {\n  console.log(value); // output: hello, world\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},7010:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>l});var n=r(758);const o={},a=n.createContext(o);function i(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);