"use strict";(self.webpackChunkdocusaurus_guides=self.webpackChunkdocusaurus_guides||[]).push([[4969],{9616:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"programming/tests/react-testing-library","title":"React Testing Library","description":"1. Introduction","source":"@site/docs/programming/tests/react-testing-library.md","sourceDirName":"programming/tests","slug":"/programming/tests/react-testing-library","permalink":"/guides/he/docs/programming/tests/react-testing-library","draft":false,"unlisted":false,"editUrl":"https://github.com/talkohavy/guides/docs/programming/tests/react-testing-library.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mySidebar","previous":{"title":"- Jest","permalink":"/guides/he/docs/programming/tests/jest"},"next":{"title":"- TypeScript","permalink":"/guides/he/docs/programming/typescript"}}');var r=t(6070),s=t(7010);const o={},a="React Testing Library",l={},c=[{value:"1. Introduction",id:"1-introduction",level:2},{value:"A. What is React-Testing Library?",id:"a-what-is-react-testing-library",level:3},{value:"B. What it is not",id:"b-what-it-is-not",level:3},{value:"2. Installation",id:"2-installation",level:2},{value:"999. Tips &amp; Tricks",id:"999-tips--tricks",level:2},{value:"- Tip 1: Wrapping things in <code>act</code> unnecessarily",id:"--tip-1-wrapping-things-in-act-unnecessarily",level:3},{value:"- Tip 2: Do not use <code>cleanup</code>",id:"--tip-2-do-not-use-cleanup",level:3},{value:"- Tip 3: Not using @testing-library/user-event",id:"--tip-3-not-using-testing-libraryuser-event",level:3},{value:"- Tip 4: Using queryByRole (and friends) NOT for non-existence",id:"--tip-4-using-querybyrole-and-friends-not-for-non-existence",level:3},{value:"- Tip 5: Using waitFor to wait for elements that can be queried with find*",id:"--tip-5-using-waitfor-to-wait-for-elements-that-can-be-queried-with-find",level:3},{value:"- Tip 999: Use <code>eslint</code>",id:"--tip-999-use-eslint",level:3}];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"react-testing-library",children:"React Testing Library"})}),"\n",(0,r.jsx)(n.h2,{id:"1-introduction",children:"1. Introduction"}),"\n",(0,r.jsx)(n.h3,{id:"a-what-is-react-testing-library",children:"A. What is React-Testing Library?"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"React-Testing Library"})," is a light-weight solution for ",(0,r.jsx)(n.strong,{children:"testing web pages by querying and interacting with DOM nodes"}),". It is great for ",(0,r.jsx)(n.strong,{children:"Component"})," testing."]}),"\n",(0,r.jsx)(n.p,{children:"What it gives you:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["a ",(0,r.jsx)(n.code,{children:"render"})," function to render a component."]}),"\n",(0,r.jsxs)(n.li,{children:["many ways to ",(0,r.jsx)(n.strong,{children:"query"})," the generated DOM"]}),"\n",(0,r.jsx)(n.li,{children:"fire events"}),"\n",(0,r.jsxs)(n.li,{children:["Integration with multiple frameworks (",(0,r.jsx)(n.code,{children:"React"})," is one of them)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"(whether simulated with JSDOM/Jest or in the browser). The main utilities it provides involve querying the DOM for nodes in a way that's similar to how the user finds elements on the page. In this way, the library helps ensure your tests give you confidence that your application will work when a real user uses it."}),"\n",(0,r.jsx)(n.h3,{id:"b-what-it-is-not",children:"B. What it is not"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"A test runner or framework."}),"\n",(0,r.jsx)(n.li,{children:"Specific to a testing framework."}),"\n",(0,r.jsxs)(n.li,{children:["Does NOT provide DOM APIs. For that you'll need either ",(0,r.jsx)(n.code,{children:"Jest"})," (i.e. ",(0,r.jsx)(n.code,{children:"@testing-library/jest-dom"}),"), ",(0,r.jsx)(n.code,{children:"Mocha"})," + ",(0,r.jsx)(n.code,{children:"JSDOM"}),", or a real browser."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-installation",children:"2. Installation"}),"\n",(0,r.jsx)(n.p,{children:"Install these:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm add -D @testing-library/dom @testing-library/jest-dom @testing-library/react jest jest-environment-jsdom ts-jest\n"})}),"\n",(0,r.jsxs)(n.p,{children:["And check out ",(0,r.jsxs)(n.a,{href:"/docs/programming/tests/jest#1-installation",children:["how to configure ",(0,r.jsx)(n.code,{children:"jest"})," in your project"]})]}),"\n",(0,r.jsxs)(n.p,{children:["Then, create a ",(0,r.jsx)(n.code,{children:"setup.tsx"})," file with the contents:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import '@testing-library/jest-dom';\nimport { configure } from '@testing-library/react';\n\nconfigure({ testIdAttribute: 'data-test-id' });\n"})}),"\n",(0,r.jsxs)(n.p,{children:["And you're ready to write ",(0,r.jsx)(n.strong,{children:"Component tests"}),"! \u2705"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"999-tips--tricks",children:"999. Tips & Tricks"}),"\n",(0,r.jsxs)(n.h3,{id:"--tip-1-wrapping-things-in-act-unnecessarily",children:["- Tip 1: Wrapping things in ",(0,r.jsx)(n.code,{children:"act"})," unnecessarily"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// \u274c\nact(() => {\n\trender(<Example />)\n})\n\nconst input = screen.getByRole('textbox', { name: /choose a fruit/i })\nact(() => {\n\tfireEvent.keyDown(input, { key: 'ArrowDown' })\n})\n\n// \u2705\nrender(<Example />)\nconst input = screen.getByRole('textbox', { name: /choose a fruit/i })\nfireEvent.keyDown(input, { key: 'ArrowDown' })\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Do NOT wrap ",(0,r.jsx)(n.code,{children:"render"})," & ",(0,r.jsx)(n.code,{children:"fireEvent"})," in ",(0,r.jsx)(n.code,{children:"act()"}),"!!!",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.code,{children:"render"})," and ",(0,r.jsx)(n.code,{children:"fireEvent"})," are ",(0,r.jsxs)(n.strong,{children:["already wrapped in ",(0,r.jsx)(n.code,{children:"act"}),"!"]}),"."]}),"\n",(0,r.jsxs)(n.h3,{id:"--tip-2-do-not-use-cleanup",children:["- Tip 2: Do not use ",(0,r.jsx)(n.code,{children:"cleanup"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// \u274c\nimport { render, screen, cleanup } from '@testing-library/react'\n\nafterEach(cleanup)\n\n// \u2705\nimport { render, screen } from '@testing-library/react'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For a long time now ",(0,r.jsx)(n.code,{children:"cleanup"})," happens automatically, and you no longer need to worry about it. Learn more."]}),"\n",(0,r.jsx)(n.h3,{id:"--tip-3-not-using-testing-libraryuser-event",children:"- Tip 3: Not using @testing-library/user-event"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// \u274c\nfireEvent.change(input, { target: { value: 'hello world' } })\n\n// \u2705\nuserEvent.type(input, 'hello world')\n"})}),"\n",(0,r.jsx)(n.h3,{id:"--tip-4-using-querybyrole-and-friends-not-for-non-existence",children:"- Tip 4: Using queryByRole (and friends) NOT for non-existence"}),"\n",(0,r.jsxs)(n.p,{children:["The best thing ",(0,r.jsx)(n.code,{children:".toBeInTheDocument"}),' can do is say: "null isn\'t in the document" which is not very helpful.']}),"\n",(0,r.jsxs)(n.p,{children:["The only reason that ",(0,r.jsx)(n.code,{children:"queryByRole"})," and friends exist is for you to have a function to call which ",(0,r.jsx)(n.strong,{children:"does not throw an error if no element is found!"}),". It returns ",(0,r.jsx)(n.code,{children:"null"})," if no element is found.\nThe only reason this is useful is to verify that an element is not rendered to the page."]}),"\n",(0,r.jsx)(n.h3,{id:"--tip-5-using-waitfor-to-wait-for-elements-that-can-be-queried-with-find",children:"- Tip 5: Using waitFor to wait for elements that can be queried with find*"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// \u274c\nconst submitButton = await waitFor(() =>\n\tscreen.getByRole('button', { name: /submit/i }),\n)\n\n// \u2705\nconst submitButton = await screen.findByRole('button', { name: /submit/i })\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Those two bits of code are basically equivalent (find* queries use waitFor under the hood), but the second is simpler and the error message you get will be better.",(0,r.jsx)(n.br,{}),"\n","Tip: use find* anytime you want to ",(0,r.jsx)(n.strong,{children:"query for something that may not be available right away"}),"."]}),"\n",(0,r.jsxs)(n.h3,{id:"--tip-999-use-eslint",children:["- Tip 999: Use ",(0,r.jsx)(n.code,{children:"eslint"})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},7010:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(758);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);