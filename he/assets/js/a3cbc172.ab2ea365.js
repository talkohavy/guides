"use strict";(self.webpackChunkdocusaurus_guides=self.webpackChunkdocusaurus_guides||[]).push([[4448],{1009:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var n=o(1527),r=o(7252);const s={sidebar_label:"8. Storybook",sidebar_position:6},i="Guide for Storybook",a={id:"programming/storybook",title:"Guide for Storybook",description:"1. Getting started",source:"@site/docs/programming/storybook.md",sourceDirName:"programming",slug:"/programming/storybook",permalink:"/guides/he/docs/programming/storybook",draft:!1,unlisted:!1,editUrl:"https://github.com/talkohavy/guides/docs/programming/storybook.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_label:"8. Storybook",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"7. npm publish a package",permalink:"/guides/he/docs/programming/npm"},next:{title:"999. New guide",permalink:"/guides/he/docs/programming/new-guide-template"}},d={},l=[{value:"1. Getting started",id:"1-getting-started",level:2},{value:"Introduction",id:"introduction",level:3},{value:"A Component&#39;s Meta",id:"a-components-meta",level:3},{value:"Layout Centered",id:"layout-centered",level:3},{value:"A Story",id:"a-story",level:3},{value:"Docs",id:"docs",level:3},{value:"Storybook &amp; Tailwind",id:"storybook--tailwind",level:3},{value:"Storybook With Dark Mode",id:"storybook-with-dark-mode",level:3},{value:"Override theme on the component level",id:"override-theme-on-the-component-level",level:3},{value:"Context Providers",id:"context-providers",level:3},{value:"Public - Static Serve",id:"public---static-serve",level:3},{value:"2. How to write Stories",id:"2-how-to-write-stories",level:2},{value:"Meta",id:"meta",level:3},{value:"Defining stories",id:"defining-stories",level:2},{value:"Rename stories",id:"rename-stories",level:2}];function c(e){const t={admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"guide-for-storybook",children:"Guide for Storybook"}),"\n",(0,n.jsx)(t.h2,{id:"1-getting-started",children:"1. Getting started"}),"\n",(0,n.jsx)(t.h3,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsxs)(t.p,{children:["Storybook scans your project and looks for files which end with .stories.js or .stories.ts. Notice how it has ",(0,n.jsx)(t.code,{children:"stories"})," in it's path, in plural, to note that each file representing a component can export multiple stories. A *.stories.js file defines all the stories for a component. Each story has a corresponding sidebar item in the Storybook app. When you click on a story, it renders in the Canvas an isolated preview iframe."]}),"\n",(0,n.jsx)(t.h3,{id:"a-components-meta",children:"A Component's Meta"}),"\n",(0,n.jsxs)(t.p,{children:["Each ",(0,n.jsx)(t.code,{children:"stories"})," file must have a Component's ",(0,n.jsx)(t.code,{children:"Meta"}),", and export default it.",(0,n.jsx)(t.br,{}),"\n","The ",(0,n.jsx)(t.code,{children:"meta"})," is simply a javascript object with properties.",(0,n.jsx)(t.br,{}),"\n","At the very least, the ",(0,n.jsx)(t.code,{children:"meta"})," object must contain the ",(0,n.jsx)(t.code,{children:"component"})," key, which points to the ",(0,n.jsx)(t.em,{children:"actual"})," component."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title="Button.stories.js"',children:"import Button from './Button';\n\nexport default {\n  component: Button\n}\n"})}),"\n",(0,n.jsx)(t.h3,{id:"layout-centered",children:"Layout Centered"}),"\n",(0,n.jsxs)(t.p,{children:["Another nice-to-have key inside meta is the ",(0,n.jsx)(t.code,{children:"parameters.layout"}),", which tells Storybook where to render the component on the screen. By default, it renders it on the top-left, but it would be nice to have it centered, right?\nTo do so, simply add:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title="Button.stories.js"',children:"import Button from './Button';\n\nexport default {\n  component: Button,\n  parameters: {\n    // Optional parameter to center the component in the Canvas. More info: https://storybook.js.org/docs/react/configure/story-layout\n    layout: 'centered',\n  },\n}\n"})}),"\n",(0,n.jsx)(t.h3,{id:"a-story",children:"A Story"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title="YourComponent.stories.js"',children:"import { YourComponent } from './YourComponent';\n\n//\ud83d\udc47 This default export determines where your story goes in the story list\nexport default {\n  component: YourComponent,\n};\n\nexport const FirstStory = {\n  args: {\n    //\ud83d\udc47 The args you need here will depend on your component\n  },\n};\n"})}),"\n",(0,n.jsxs)(t.p,{children:["A ",(0,n.jsx)(t.code,{children:"story"})," is merely a javascript object which hold an ",(0,n.jsx)(t.code,{children:"args"})," key. combination of values for the component's props, which describes how to render the component.",(0,n.jsx)(t.br,{}),"\n","A ",(0,n.jsx)(t.code,{children:"story"})," needs to be named-exported from the ",(0,n.jsx)(t.code,{children:"*stories.js"})," file.",(0,n.jsx)(t.br,{}),"\n","A ",(0,n.jsx)(t.code,{children:"story"})," with an empty as an object, will simply mean that all the component's props are undefined.",(0,n.jsx)(t.br,{}),"\n","The ",(0,n.jsx)(t.em,{children:"variable name"})," holding the ",(0,n.jsx)(t.code,{children:"story"})," will be the name presented in the Storybook app, describing that ",(0,n.jsx)(t.code,{children:"story"}),", so it's a good idea to have it uppercased.\nIf a stories.js file does not export a single story, no visuals of that component would appear in the Storybook app. It would be like the component doesn't even exist."]}),"\n",(0,n.jsx)(t.h3,{id:"docs",children:"Docs"}),"\n",(0,n.jsx)(t.p,{children:'The "Docs" page displays auto-generated documentation for components (inferred from the source code). Usage documentation is helpful when sharing reusable components with your team, for example, in an application.'}),"\n",(0,n.jsx)(t.h3,{id:"storybook--tailwind",children:"Storybook & Tailwind"}),"\n",(0,n.jsxs)(t.p,{children:["To have Storybook and tailwind working together is rather simple.",(0,n.jsx)(t.br,{}),"\n","All Storybook needs is a css, generated by tailwind as an output, as its input.",(0,n.jsx)(t.br,{}),"\n","That same css file needs to be imported in the ",(0,n.jsx)(t.code,{children:"preview.js"})," configuration file of Storybook:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title=".storybook/preview.js"',children:"import '../styles/tailwind.css';\n\n/** @type { import('@storybook/react').Preview } */\nconst preview = {\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n};\n\nexport default preview;\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This will make Tailwind\u2019s style classes available to all of your stories.",(0,n.jsx)(t.br,{}),"\n","To generate that css file with tailwind, all you gotta do is wrote a script that does so:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "pre-storybook-prod": "npx tailwindcss -o ./styles/tailwind.css --minify"\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["This is for production.",(0,n.jsx)(t.br,{}),"\n","For development, you would most-likely want a ",(0,n.jsx)(t.code,{children:"watch"})," version of that script, so that you could make changes to the source code, and see changes in real-time:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",metastring:'title="package.json"',children:'{\n  "pre-storybook-dev": "npx tailwindcss -i ./src/index.css -o ./styles/tailwind.css --watch"\n}\n'})}),"\n",(0,n.jsx)(t.h3,{id:"storybook-with-dark-mode",children:"Storybook With Dark Mode"}),"\n",(0,n.jsx)(t.p,{children:"First of all, update your tailwind.config.js file to change themes based on a class or data-attribute. This example uses a data-attribute."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title="tailwind.config.js"',children:"module.exports = {\n  content: ['./src/**/*.{js,jsx,ts,tsx}'],\n  // Toggle dark-mode based on .dark class or data-mode=\"dark\"\n  darkMode: ['class', '[data-theme=\"dark\"]'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n"})}),"\n",(0,n.jsx)(t.p,{children:"Next, install the @storybook/addon-themes addon to provide the switcher tool."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"npm i -D @storybook/addon-themes\n"})}),"\n",(0,n.jsx)(t.p,{children:"Then, add following content to .storybook/main.js:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title=".storybook/main.js"',children:"export default {\n  addons: ['@storybook/addon-themes'],\n};\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Toggle themes by class name"})}),"\n",(0,n.jsx)(t.p,{children:"Add the withThemeByClassName decorator to your Storybook from @storybook/addon-themes:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title=".storybook/preview.js"',children:"import { withThemeByClassName } from '@storybook/addon-themes';\n\n/* snipped for brevity */\n\nexport const decorators = [\n  withThemeByClassName({\n    themes: { light: 'light', dark: 'dark' },\n    defaultTheme: 'light',\n  }),\n];\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Toggle themes by data-attribute"})}),"\n",(0,n.jsx)(t.p,{children:"Add the withThemeByDataAttribute decorator to your Storybook from @storybook/addon-themes:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title=".storybook/preview.js"',children:"import { withThemeByDataAttribute } from '@storybook/addon-themes';\n\n/* snipped for brevity */\n\nexport const decorators = [\n  withThemeByDataAttribute({\n    themes: {\n      light: 'light',\n      dark: 'dark',\n    },\n    defaultTheme: 'light',\n    attributeName: 'data-mode',\n  }),\n];\n"})}),"\n",(0,n.jsx)(t.h3,{id:"override-theme-on-the-component-level",children:"Override theme on the component level"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title="Button.stories.js"',children:"export default {\n  parameters: {\n    themes: {\n      themeOverride: 'light', // component level override\n    },\n  },\n}\n"})}),"\n",(0,n.jsx)(t.h3,{id:"context-providers",children:"Context Providers"}),"\n",(0,n.jsx)(t.p,{children:"If a particular story has a problem rendering, often it means your component expects a specific environment is available to the component."}),"\n",(0,n.jsx)(t.p,{children:'A common frontend pattern is for components to assume that they render in a specific "context" with parent components higher up the rendering hierarchy (for instance, theme providers).'}),"\n",(0,n.jsx)(t.p,{children:"Use decorators to \u201cwrap\u201d every story in the necessary context providers. The .storybook/preview.js file allows you to customize how components render in Canvas, the preview iframe. See how you can wrap every component rendered in Storybook with Styled Components ThemeProvider, Vue's Fontawesome, or with an Angular theme provider component in the example below."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title=".storybook/preview.js"',children:"import React from 'react';\n\nimport { ThemeProvider } from 'styled-components';\n\nexport default {\n  decorators: [\n    (Story) => (\n      <ThemeProvider theme=\"default\">\n        {/* \ud83d\udc47 Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}\n        <Story />\n      </ThemeProvider>\n    ),\n  ],\n};\n"})}),"\n",(0,n.jsx)(t.h3,{id:"public---static-serve",children:"Public - Static Serve"}),"\n",(0,n.jsxs)(t.p,{children:["If you want to link to static files in your project or stories (e.g., /fonts/XYZ.woff), use the ",(0,n.jsx)(t.code,{children:"-s path/to/folder"})," flag to specify a static folder to serve from when you start up Storybook. To do so, edit the storybook and build-storybook scripts in package.json."]}),"\n",(0,n.jsx)(t.p,{children:"We recommend serving external resources and assets requested in your components statically with Storybook. It ensures that assets are always available to your stories."}),"\n",(0,n.jsx)(t.h2,{id:"2-how-to-write-stories",children:"2. How to write Stories"}),"\n",(0,n.jsx)(t.h3,{id:"meta",children:"Meta"}),"\n",(0,n.jsx)(t.p,{children:"The default export metadata controls how Storybook lists your stories and provides information used by addons. For example, here\u2019s the default export for a story file Button.stories.js|ts:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title="Button.stories.js"',children:"import { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n"})}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsxs)(t.p,{children:["Starting with Storybook version 7.0, story titles are analyzed statically as part of the build process. The ",(0,n.jsx)(t.strong,{children:"default"})," export must contain a ",(0,n.jsx)(t.em,{children:"title"})," property that can be read statically or a component property from which an automatic title can be computed. Using the id property to customize your story URL must also be statically readable."]})}),"\n",(0,n.jsx)(t.h2,{id:"defining-stories",children:"Defining stories"}),"\n",(0,n.jsxs)(t.p,{children:["Use the named exports of a file to define your component\u2019s stories. We recommend you use UpperCamelCase for your story exports. Here\u2019s how to render ",(0,n.jsx)(t.code,{children:"Button"}),' in the "primary" state and export a story called ',(0,n.jsx)(t.code,{children:"Primary"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title="Button.stories.js"',children:"import { Button } from './Button';\n\nexport default {\n  component: Button,\n};\n\n/*\n *\ud83d\udc47 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nexport const Primary = {\n  render: () => <Button primary label=\"Button\" />,\n};\n"})}),"\n",(0,n.jsx)(t.h2,{id:"rename-stories",children:"Rename stories"}),"\n",(0,n.jsx)(t.p,{children:"You can rename a story to give it a more accurate display name within the Storybook. Here's how you can change the display name of a story:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",metastring:'title="Button.stories.js"',children:"import { Button } from './Button';\n\n/*\n *\ud83d\udc47 Render functions are a framework specific feature to allow you control on how the component renders.\n * See https://storybook.js.org/docs/api/csf\n * to learn how to use render functions.\n */\nconst Primary = {\n  name: 'I am the primary',\n  render: () => <Button primary label=\"Button\" />,\n};\n\nexport { Primary }\n\nexport default {\n  component: Button,\n};\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},7252:(e,t,o)=>{o.d(t,{Z:()=>a,a:()=>i});var n=o(959);const r={},s=n.createContext(r);function i(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);