"use strict";(self.webpackChunkdocusaurus_guides=self.webpackChunkdocusaurus_guides||[]).push([[727],{8148:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"programming/devops/kubernetes/minikube","title":"Minikube","description":"1. Minikube Commands","source":"@site/docs/programming/devops/kubernetes/minikube.md","sourceDirName":"programming/devops/kubernetes","slug":"/programming/devops/kubernetes/minikube","permalink":"/guides/he/docs/programming/devops/kubernetes/minikube","draft":false,"unlisted":false,"editUrl":"https://github.com/talkohavy/guides/docs/programming/devops/kubernetes/minikube.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mySidebar","previous":{"title":"- Troubleshooting","permalink":"/guides/he/docs/programming/devops/kubernetes/troubleshooting"},"next":{"title":"- Helm","permalink":"/guides/he/docs/programming/devops/helm"}}');var a=s(5813),t=s(3546);const l={},r="Minikube",o={},d=[{value:"<strong>1. Minikube Commands</strong>",id:"1-minikube-commands",level:2},{value:"- Command 1: minikube delete",id:"--command-1-minikube-delete",level:3},{value:"- Command 2: minikube profile list",id:"--command-2-minikube-profile-list",level:3},{value:"- Command 3: minikube profile",id:"--command-3-minikube-profile",level:3},{value:"- Command 4: minikube start",id:"--command-4-minikube-start",level:3},{value:"- Command 5: minikube stop",id:"--command-5-minikube-stop",level:3},{value:"- Command 6: minikube status",id:"--command-6-minikube-status",level:3},{value:"- Command 7: minikube ip",id:"--command-7-minikube-ip",level:3},{value:"- Command 8: minikube node list",id:"--command-8-minikube-node-list",level:3},{value:"- Command 9: minikube ssh",id:"--command-9-minikube-ssh",level:3},{value:"- Command 10: minikube service",id:"--command-10-minikube-service",level:3},{value:"- A. The <code>--url</code> flag:",id:"--a-the---url-flag",level:4},{value:"- B. The <code>--all</code> flag:",id:"--b-the---all-flag",level:4},{value:"- Command 11: minikube tunnel",id:"--command-11-minikube-tunnel",level:3},{value:"<strong>2. Minikube Playground - Getting Started</strong>",id:"2-minikube-playground---getting-started",level:2},{value:"\u2022 Step 1: Create a minikube cluster",id:"-step-1-create-a-minikube-cluster",level:3},{value:"\u2022 Step 2: connecting to your minikube cluster",id:"-step-2-connecting-to-your-minikube-cluster",level:3},{value:"\u2022 Step 3: check containers within your node",id:"-step-3-check-containers-within-your-node",level:3},{value:"\u2022 Step 4: check the cluster&#39;s info",id:"-step-4-check-the-clusters-info",level:3},{value:"\u2022 Step 5: get nodes",id:"-step-5-get-nodes",level:3},{value:"\u2022 Step 6: get pods &amp; namespaces",id:"-step-6-get-pods--namespaces",level:3},{value:"\u2022 Step 7: manually create a pod",id:"-step-7-manually-create-a-pod",level:3},{value:"\u2022 Step 8: connect to a specific container",id:"-step-8-connect-to-a-specific-container",level:3},{value:"\u2022 Step 9: create a deployment",id:"-step-9-create-a-deployment",level:3},{value:"\u2022 Step 10: scale a deployment",id:"-step-10-scale-a-deployment",level:3},{value:"\u25cb Scale up",id:"-scale-up",level:3},{value:"\u25cb Scale Down",id:"-scale-down",level:3}];function c(e){const n={admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"minikube",children:"Minikube"})}),"\n",(0,a.jsx)(n.h2,{id:"1-minikube-commands",children:(0,a.jsx)(n.strong,{children:"1. Minikube Commands"})}),"\n",(0,a.jsx)(n.p,{children:"A minikube cluster consists of 1 node, that serves both as the master node & the worker node, looks like that:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"minikube cluster",src:s(5985).A+"",width:"2784",height:"1614"})}),"\n",(0,a.jsx)(n.p,{children:"On the left, you can see at the top level the Kubernetes Cluster. Under the Kubernetes Cluster, there could be 1 or more nodes (servers). Minikube used to have only 1 (it can now have more). Under the Node, there could be 1 or more pods. Under the pod, there could be 1 or more containers. Usually? A pod holds only 1 container."}),"\n",(0,a.jsx)(n.p,{children:"When creating a minikube cluster for the first time, by default, it's created with:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"1 kubernetes cluster"}),"\n",(0,a.jsx)(n.li,{children:"1 node (that acts like both the master & worker node)"}),"\n",(0,a.jsx)(n.li,{children:"1 pod"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"--command-1-minikube-delete",children:"- Command 1: minikube delete"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"The command:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube delete\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Description:"})}),"\n",(0,a.jsx)(n.p,{children:"Deletes a local Kubernetes cluster. This command deletes the VM, and removes all associated files."}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h3,{id:"--command-2-minikube-profile-list",children:"- Command 2: minikube profile list"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"The command:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube profile list\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Description:"})}),"\n",(0,a.jsx)(n.p,{children:"Lists all minikube profiles. Lists all valid minikube profiles and detects all possible invalid profiles."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"A response example would look like:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'- Deleting "minikube" in docker ...\n- Deleting container "minikube" ...\n- Removing C:\\Users\\tal\\.minikube\\machines\\minikube ...\n- Removed all traces of the "minikube" cluster.\n'})}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h3,{id:"--command-3-minikube-profile",children:"- Command 3: minikube profile"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"The command:"})}),"\n",(0,a.jsxs)(n.p,{children:["Set profile as ",(0,a.jsx)(n.strong,{children:"default"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube profile profile_name\n"})}),"\n",(0,a.jsx)(n.p,{children:"Get current profile:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube profile\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Description:"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"profile"})," sets the current minikube profile, or gets the current profile if no arguments are provided. This is used to run and manage multiple minikube instances. You can return to the default minikube profile by running ",(0,a.jsx)(n.code,{children:"minikube profile default"})]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h3,{id:"--command-4-minikube-start",children:"- Command 4: minikube start"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"The command:"})}),"\n",(0,a.jsx)(n.p,{children:"If it's your 1st time running this command:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Option 1: start a cluster using the ",(0,a.jsx)(n.em,{children:"docker"})," driver"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube start --driver=docker --profile profile_name\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Option 2: make ",(0,a.jsx)(n.em,{children:"docker"})," the default driver, then you could use short: ",(0,a.jsx)(n.code,{children:"minikube start"})]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube config set driver docker\nminikube start\n"})}),"\n",(0,a.jsx)(n.p,{children:"If it's your 2nd+ time running this command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube start\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Description:"})}),"\n",(0,a.jsx)(n.p,{children:"Starts a kubernetes cluster locally on your machine."}),"\n",(0,a.jsx)(n.p,{children:"For this command to work, your machine's Docker Engine needs to be running. It should take a few minutes to start a minikube cluster. That cluster has only 1 node, which acts as both the master node & the worker node."}),"\n",(0,a.jsxs)(n.p,{children:["The cluster is created with a default profile called ",(0,a.jsx)(n.code,{children:"minikube"}),", which you could override using the ",(0,a.jsx)(n.code,{children:"--profile"})," (",(0,a.jsx)(n.code,{children:"-p"}),") flag:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube start --profile prod\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"A response example would look like:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"- minikube v1.26.1 on Microsoft Windows 10 Home 10.0.19044 Build 19044\n- Using the docker driver based on user configuration\n- Using Docker Desktop driver with root privileges\n- Starting control plane node minikube in cluster minikube\n- Pulling base image ...\n  > gcr.io/k8s-minikube/kicbase: 74.85 MiB / 386.61 MiB 19.36% 4.79 MiB p/s\n"})}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h3,{id:"--command-5-minikube-stop",children:"- Command 5: minikube stop"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"The command:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube stop\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Description:"})}),"\n",(0,a.jsx)(n.p,{children:"Stops a running local Kubernetes cluster."}),"\n",(0,a.jsx)(n.p,{children:'Stops a local Kubernetes cluster. This command stops the underlying VM or container, but keeps user data intact. The cluster can be started again with the "start" command.'}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"A response example would look like:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"- minikube v1.26.1 on Microsoft Windows 10 Home 10.0.19044 Build 19044\n- Using the docker driver based on user configuration\n- Using Docker Desktop driver with root privileges\n- Starting control plane node minikube in cluster minikube\n- Pulling base image ...\n  > gcr.io/k8s-minikube/kicbase: 74.85 MiB / 386.61 MiB 19.36% 4.79 MiB p/s\n"})}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h3,{id:"--command-6-minikube-status",children:"- Command 6: minikube status"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"The command:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube status --profile profile_name\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Description:"})}),"\n",(0,a.jsx)(n.p,{children:"Shows the status of your kubernetes cluster."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"A response example would look like:"})}),"\n",(0,a.jsx)(n.p,{children:"A good response would look like:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube\ntype: Control Plane\nhost: Running\nkubelet: Running\napiserver: Running\nkubeconfig: Configured\n"})}),"\n",(0,a.jsx)(n.p,{children:"If a cluster does not exist, the response would appear as such:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'Profile "minikube" not found.\n'})}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h3,{id:"--command-7-minikube-ip",children:"- Command 7: minikube ip"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube ip --node node_name --profile profile_name\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Description:"})}),"\n",(0,a.jsx)(n.p,{children:"Returns the IP address of the specified node."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Commonly used options:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Flag 1: -n | --node"}),(0,a.jsx)(n.br,{}),"\n","By default, it returns the ip of the node which is considered as the primary control plane. To get the ip of some other node, use the ",(0,a.jsx)(n.code,{children:"-n"}),", ",(0,a.jsx)(n.code,{children:"--node"})," flag followed by its name."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube ip --node luckylove\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h3,{id:"--command-8-minikube-node-list",children:"- Command 8: minikube node list"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube node list\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Description:"})}),"\n",(0,a.jsx)(n.p,{children:"Returns a list of all nodes inside the minikube cluster."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"A response example would look like:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube 192.168.49.2\n"})}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h3,{id:"--command-9-minikube-ssh",children:"- Command 9: minikube ssh"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube ssh --node node_name --profile profile_name\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Description:"})}),"\n",(0,a.jsx)(n.p,{children:"A way to connect to your minikube environment (for debugging)."}),"\n",(0,a.jsx)(n.p,{children:"With this command you don't even need to enter a password! So it's much more comfortable."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"A response example would look like:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"docker@minikube:~$\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We can learn from the output above that when we ran ",(0,a.jsx)(n.code,{children:"minikube start"})," to create the cluster, minikube by default created a ",(0,a.jsx)(n.em,{children:"username"}),' called "docker", with a default ',(0,a.jsx)(n.em,{children:"password"}),' of "tcuser".']}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Username"}),": docker"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Password"}),": tcuser"]}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h3,{id:"--command-10-minikube-service",children:"- Command 10: minikube service"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube service -n <namespace> name_of_service\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Description:"})}),"\n",(0,a.jsxs)(n.p,{children:["In case of a ",(0,a.jsx)(n.strong,{children:"NodePort"})," type, opens up a web browser with the kubernetes URL for the service running in your local cluster."]}),"\n",(0,a.jsxs)(n.h4,{id:"--a-the---url-flag",children:["- A. The ",(0,a.jsx)(n.code,{children:"--url"})," flag:"]}),"\n",(0,a.jsxs)(n.p,{children:["Use the flag ",(0,a.jsx)(n.code,{children:"--url"}),", to display the Kubernetes service URL in the CLI instead of opening it in the default browser."]}),"\n",(0,a.jsxs)(n.h4,{id:"--b-the---all-flag",children:["- B. The ",(0,a.jsx)(n.code,{children:"--all"})," flag:"]}),"\n",(0,a.jsx)(n.p,{children:'Forwards all services in a namespace (defaults to "false").'}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h3,{id:"--command-11-minikube-tunnel",children:"- Command 11: minikube tunnel"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube tunnel\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Description:"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"2-minikube-playground---getting-started",children:(0,a.jsx)(n.strong,{children:"2. Minikube Playground - Getting Started"})}),"\n",(0,a.jsx)(n.h3,{id:"-step-1-create-a-minikube-cluster",children:"\u2022 Step 1: Create a minikube cluster"}),"\n",(0,a.jsx)(n.p,{children:"Before starting a minikube cluster, let's first check the current status of minikube:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube status\n"})}),"\n",(0,a.jsx)(n.p,{children:"You should see and output displayed like that:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'Profile "minikube" not found.\n'})}),"\n",(0,a.jsx)(n.p,{children:"We will check it again after starting our cluster.\nTo start a minikube cluster, run the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube start\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Make sure that Docker Engine is up and running!",(0,a.jsx)(n.br,{}),"\n","You should see an output appear like that:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"- minikube v1.26.1 on Microsoft Windows 10 Home 10.0.19044 Build 19044\n- Using the docker driver based on user configuration\n- Using Docker Desktop driver with root privileges\n- Starting control plane node minikube in cluster minikube\n- Pulling base image ... > gcr.io/k8s-minikube/kicbase: 74.85 MiB / 386.61 MiB 19.36% 4.79 MiB p/s\n"})}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsx)(n.p,{children:"If you made a mistake, like for example you chose \"hyperv\", but found out that windows 10 home edition doesn't have hyper-v features, you'll need to delete the minikube cluster by:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube delete\n"})})]}),"\n",(0,a.jsx)(n.p,{children:"It should take a few minutes to start a minikube cluster, and in the end you should see a message like:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'- Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default\n'})}),"\n",(0,a.jsx)(n.p,{children:'As well as a docker container called "minikube" in a running state.'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker ps\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The sentence above, saying ",(0,a.jsx)(n.em,{children:'"kubectl is now configured to use "minikube" cluster"'})," is important, because it means that you don't need to do anything in order to connect from kubectl to the actual minikube cluster. The connection was already created for you automatically during the creation of the minikube cluster. You don't need to do stuff like attach a ",(0,a.jsx)(n.code,{children:"context"})," with ",(0,a.jsx)(n.code,{children:"kubectl config use-context context-name"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Let's now run again the ",(0,a.jsx)(n.code,{children:"minikube status"})," command, and see what it prints out:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube status\n"})}),"\n",(0,a.jsx)(n.p,{children:"you should see an output look like:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube\ntype: Control Plane\nhost: Running\nkubelet: Running\napiserver: Running\nkubeconfig: Configured\n"})}),"\n",(0,a.jsxs)(n.p,{children:["So we're seeing that the host is running, the kubelet is running, the api-server is running, and that the kubeconfig is configured. This is how a normal status of the minikube cluster should look like. Basically, now we are actually able to create ",(0,a.jsx)(n.code,{children:"pods"}),", ",(0,a.jsx)(n.code,{children:"deployments"}),", ",(0,a.jsx)(n.code,{children:"services"}),", etc, inside of this minikube cluster."]}),"\n",(0,a.jsx)(n.h3,{id:"-step-2-connecting-to-your-minikube-cluster",children:"\u2022 Step 2: connecting to your minikube cluster"}),"\n",(0,a.jsxs)(n.p,{children:["This next command, ",(0,a.jsx)(n.code,{children:"minikube ip"}),", is mainly for the purpose of connecting with the cluster. This is like an ssh on a virtual machine, which allows you to run commands directly on it."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube ip\n"})}),"\n",(0,a.jsx)(n.p,{children:"should result in something like:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"192.168.49.2\n"})}),"\n",(0,a.jsx)(n.p,{children:"This command helps you see which IP address was assigned to the virtual machine, or the docker container, which is running our kubernetes node, which was created by minikube."}),"\n",(0,a.jsx)(n.p,{children:"This machine, this node, is the one running the kubernetes node."}),"\n",(0,a.jsx)(n.p,{children:"Not very useful, but you can ssh into that machine.\nMinikube offers a built-in internal ssh command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube ssh\n"})}),"\n",(0,a.jsx)(n.p,{children:"which after that, you'll see:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker@minikube:~$\n"})}),"\n",(0,a.jsx)(n.p,{children:'Don\'t be fooled by the "docker" word. Minikube simply creates a default username called "docker", with a default password of "tcuser".'}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Username"}),": docker"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Password"}),": tcuser"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["A second way to connect with your minikube cluster is by using ",(0,a.jsx)(n.code,{children:"docker exec"}),"::"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker exec -it <minikube-container-id> /bin/bash\n"})}),"\n",(0,a.jsx)(n.p,{children:"We are now inside the kubernetes node."}),"\n",(0,a.jsx)(n.h3,{id:"-step-3-check-containers-within-your-node",children:"\u2022 Step 3: check containers within your node"}),"\n",(0,a.jsx)(n.p,{children:"First command I'd like you to run inside the VM is a docker one:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker ps\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In my case, running this command I saw around 14 running containers.",(0,a.jsx)(n.br,{}),"\n","If you look closely at the names, you'll see some familiar ones:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"k8s_POD_kube-apiserver\nk8s_POD_kube-scheduler\nk8s_kube-proxy_kube-proxy\nk8s_POD_kube-controller-manager\nk8s_coredns_coredns\nk8s_etcd_etcd\n"})}),"\n",(0,a.jsxs)(n.p,{children:["As mentioned in an earlier part of this guide, we much rather be using ",(0,a.jsx)(n.code,{children:"kubectl"})," to manage our kubernetes cluster remotely, from our own local terminal. This means that we don't actually need to connect to our minikube environment via ssh and be inside of it, but rather, we'd use the ",(0,a.jsx)(n.code,{children:"kubectl"})," and control it from outside."]}),"\n",(0,a.jsxs)(n.p,{children:["That's it for ",(0,a.jsx)(n.code,{children:"minikube"}),"! This part is basically done. From this point onwards, it's ",(0,a.jsx)(n.code,{children:"kubectl"}),"'s job to manipulate the cluster, add pods, removed pods, create deployments, and many more. Minikube's role is over. We only needed it in order to create a cluster, and have a live environment running all our pods, deployments, services, etc."]}),"\n",(0,a.jsx)(n.h3,{id:"-step-4-check-the-clusters-info",children:"\u2022 Step 4: check the cluster's info"}),"\n",(0,a.jsx)(n.p,{children:"The first command we'd run is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl cluster-info\n"})}),"\n",(0,a.jsx)(n.p,{children:"You should see the following output printed:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Kubernetes control plane is running at https://127.0.0.1:54341\nCoreDNS is running at https://127.0.0.1:54341/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n"})}),"\n",(0,a.jsx)(n.p,{children:"To further debug and diagnose cluster problems, use 'kubectl cluster-info dump':"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl cluster-info dump\n"})}),"\n",(0,a.jsx)(n.p,{children:"The response on that command is too crazy to paste here. It's a long logs report."}),"\n",(0,a.jsx)(n.h3,{id:"-step-5-get-nodes",children:"\u2022 Step 5: get nodes"}),"\n",(0,a.jsx)(n.p,{children:"But first, let's list nodes which are available in our kubernetes cluster.\nRun the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl get nodes\n"})}),"\n",(0,a.jsx)(n.p,{children:"Running this locally with minikube you would probably see only one node as the output:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"NAME      STATUS    ROLES           AGE   VERSION\nminikube  Ready     control-plane   41m   v1.24.3\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This single node acts as both the ",(0,a.jsx)(n.em,{children:"master node"})," as well as the ",(0,a.jsx)(n.em,{children:"worker node"}),".\nOn the ",(0,a.jsx)(n.em,{children:"worker node"}),", kubernetes creates different ",(0,a.jsx)(n.em,{children:"pods"})," related to your ",(0,a.jsx)(n.em,{children:"deployments"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"-step-6-get-pods--namespaces",children:"\u2022 Step 6: get pods & namespaces"}),"\n",(0,a.jsx)(n.p,{children:"Now let's check how many pods are available right now in our cluster:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl get pods\n"})}),"\n",(0,a.jsx)(n.p,{children:"This would print out:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"No resources found in default namespace.\n"})}),"\n",(0,a.jsxs)(n.p,{children:["By default, it lists all the pods inside the ",(0,a.jsx)(n.em,{children:"default"})," namespace, but we haven't created any pods so far! That's why we got nothing back. But if we look inside a different namespace, we would see some interesting stuff.",(0,a.jsx)(n.br,{}),"\n","So first, let's list all the namespaces, to learn which namespaces are even available to us in this kubernetes cluster:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl get namespaces\n"})}),"\n",(0,a.jsx)(n.p,{children:"This would print out:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"NAME STATUS AGE\ndefault Active 48m\nkube-node-lease Active 48m\nkube-public Active 48m\nkube-system Active 48m\n"})}),"\n",(0,a.jsx)(n.p,{children:"We see that we have 4 namespaces: default, kube-node-lease, kube-public, and kube-system. Namespaces are used in kubernetes in order to group different resources and configuration objects."}),"\n",(0,a.jsx)(n.p,{children:"Let's now check what pods are running in the kube-system namespace:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl get pods --namespace=kube-system\n"})}),"\n",(0,a.jsx)(n.p,{children:"This got me back the result:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'NAME READY STATUS RESTARTS AGE\ncoredns-6d4b75cb6d-jz8r9 1/1 Running 0 54m\netcd-minikube 1/1 Running 0 54m\nkube-apiserver-minikube 1/1 Running 0 54m\nkube-controller-manager-minikube 1/1 Running 0 54m\nkube-proxy-g75dw 1/1 Running 0 54m\nkube-scheduler-minikube 1/1 Running 0 54m\nstorage-provisioner 1/1 Running 1 (54m ago) 54m\n\n---\n\nNormal Scheduled 20m default-scheduler Successfully assigned default/nginx to minikube\nNormal Pulling 20m kubelet Pulling image "nginx"\nNormal Pulled 20m kubelet Successfully pulled image "nginx" in 16.2956785s\nNormal Created 20m kubelet Created container nginx\nNormal Started 20m kubelet Started container nginx\n'})}),"\n",(0,a.jsxs)(n.p,{children:["All those pods returned are ",(0,a.jsx)(n.em,{children:"system pods"}),", which are running on this ",(0,a.jsx)(n.em,{children:"master node"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"-step-7-manually-create-a-pod",children:"\u2022 Step 7: manually create a pod"}),"\n",(0,a.jsx)(n.p,{children:"Alright! Now let's go ahead and create a pod manually."}),"\n",(0,a.jsxs)(n.p,{children:["kubectl has a ",(0,a.jsx)(n.code,{children:"kubectl run"})," command, which is very similar to the ",(0,a.jsx)(n.code,{children:"docker run"})," command. Just as with the ",(0,a.jsx)(n.code,{children:"docker run"})," command you can create a single docker container, with the ",(0,a.jsx)(n.code,{children:"kubectl run"})," command you can create a single pod."]}),"\n",(0,a.jsx)(n.p,{children:"The general form of the command is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl run <pod-name> --image=IMAGE_NAME\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Let's, for instance, use ",(0,a.jsx)(n.code,{children:"nginx"})," as our docker image from docker hub:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl run nginx --image=nginx\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Note that I named the pod exactly like the image, but I certainly didn't have to.\nUnder the ",(0,a.jsx)(n.code,{children:"--image"})," flag though, the image name must be a valid image from the docker registry.",(0,a.jsx)(n.br,{}),"\n","Running the above command, an nginx docker image will automatically be pulled, and a new container will be created based on this image, and this container will be running inside of our kubernetes pod."]}),"\n",(0,a.jsx)(n.p,{children:"After running the command you should see the following message:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pod/nginx created\n"})}),"\n",(0,a.jsx)(n.p,{children:"let's now enter the command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl get pods\n"})}),"\n",(0,a.jsx)(n.p,{children:"And you should see a response like:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"NAME READY STATUS RESTARTS AGE\nnginx 0/1 ContainerCreating 0 61s\n"})}),"\n",(0,a.jsx)(n.p,{children:'So you can see that a single pod has been created, but it\'s not ready yet, and its status is "ContainerCreating". If you ran the command a few seconds later, you should see this response:'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"NAME READY STATUS RESTARTS AGE\nnginx 1/1 Running 0 61s\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now it's ready! and it's in a good \"running\" state.",(0,a.jsx)(n.br,{}),"\n",'Let\'s now get some details about this specific pod, which name we chose as "nginx".\nFor getting details on a specific node, run the command:']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl describe pod nginx\n"})}),"\n",(0,a.jsx)(n.p,{children:"You should see a pretty long response:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'Name: nginx\nNamespace: default\nPriority: 0\nService Account: default\nNode: minikube/192.168.49.2\nStart Time: Wed, 14 Sep 2022 22:46:07 +0300\nLabels: run=nginx\nAnnotations: <none>\nStatus: Running\nIP: 172.17.0.3\nIPs:\n  IP: 172.17.0.3\nContainers:\n  nginx:\n    Container ID: docker://ddfde4190e818807339700c2b996c8e8eb6c72378a4f7a913cf478c9dd32450b\n    Image: nginx\n    Image ID: docker-pullable://nginx@sha256:0b970013351304af46f322da1263516b188318682b2ab1091862497591189ff1\n    Port: <none>\n    Host Port: <none>\n    State: Running\n      Started: Wed, 14 Sep 2022 22:46:25 +0300\n    Ready: True\n    Restart Count: 0\n    Environment: <none>\n    Mounts:\n/var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-vxrs4 (ro)\nConditions:\n    Type Status\n    Initialized True\n    Ready True\n    ContainersReady True\n    PodScheduled True\nVolumes:\n    kube-api-access-vxrs4:\n      Type: Projected (a volume that contains injected data from multiple sources)\n      TokenExpirationSeconds: 3607\n      ConfigMapName: kube-root-ca.crt\n      ConfigMapOptional: <nil>\n      DownwardAPI: true\nQoS Class: BestEffort\nNode-Selectors: <none>\nTolerations: node.kubernetes.io/not-ready:NoExecute op=Exists for 300s\n             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s\nEvents:\n  Type    Reason     Age   From               Message\n  ----    ------     ---   ----               -------\n  Normal  Scheduled  30s   default-scheduler  Successfully assigned default/nginx to minikube\n  Normal  Pulling    29s   kubelet            Pulling image "nginx"\n  Normal  Pulled     28s   kubelet            Successfully pulled image "nginx" in 1.578s (1.578s including waiting)\n  Normal  Created    28s   kubelet            Created container nginx\n  Normal  Started    28s   kubelet            Started container nginx\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Some really useful information is:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"name"}),": name of the pod"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"namespace"}),": the namespace it belongs to (automatically assigned to default)."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Start time"}),": the start time of the pod."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": the status of the pod (running, stopped, etc.)"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"IP"}),": the IP address which was assigned to this specific pod. Note that this is an internal IP address! You will not be able to connect to it from outside! In order to be able to connect to pods, you have to create services in kubernetes. We'll see that a bit later.\nContainers & Container ID: Containers hold a list of all docker containers which are running inside of our pod. An item on that list would have a container ID, which is the container ID that was generated/given to it."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Controlled By"}),': this field is related to a subject called deployment - where many identical pods are considered as one collection, and so with this field we could see who controls all those identical pods. This fields basically says: "I belong to this deployment". The value here looks something like: ',(0,a.jsx)(n.code,{children:"ReplicaSet/DEPLOYMENT_NAME-<replicaSet-hash>"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Image"}),": which image was utilized for this particular container. That's the image which was specified using the --image flag upon creation of the pod."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Events"}),": in the events section you can see a message saying the pod was successfully assigned to minikube node, a message about the image which was pulled, creation of the container, and starting of tat container."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsx)(n.p,{children:"There were actually two containers being ran!\nIf you connect to your minikube again with:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"minikube ssh\n"})}),(0,a.jsx)(n.p,{children:"and in there run the command:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker ps | grep nginx\n"})}),(0,a.jsx)(n.p,{children:"You'll see two running containers:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'ddfde nginx "/docker-entrypoint.\u2026" 37 min ago Up 37 min k8s_nginx_nginx_default_0b6bb6\n60a2b k8s.gcr.io/pause:3.6 "/pause" 38 min ago Up 38 min k8s_POD_nginx_default_0b6bb695\n'})}),(0,a.jsxs)(n.p,{children:["Both are related to nginx.\nFirst one is named: ",(0,a.jsx)(n.code,{children:"k8s_nginx_nginx..."}),"\nAnd the second one is named: ",(0,a.jsx)(n.code,{children:"k8s_POD_nginx..."}),'\nThe second one is also known as "pause container".\nYou can actually see, that the first one ran the script "/docker-entrypoint", and that the second one launched a script named "/pause".\nThe point to take from here is that if docker is chosen as the container runtime in kubernetes, there are always such "pause containers" that are created for each specific pod. Those pause containers are created in order to, let\'s say, lock the namespace of a specific pod. If you recall, we previously discussed how all containers inside of the same pod actually share the same namespace.\nSo what\'s basically happening here?\nThe first container of nginx, it could be stopped, could be recreated by kubernetes, but the pod remains untouched. And this second container, which is called "pause container", is required to lock/keep the namespace of the pod.']})]}),"\n",(0,a.jsx)(n.h3,{id:"-step-8-connect-to-a-specific-container",children:"\u2022 Step 8: connect to a specific container"}),"\n",(0,a.jsx)(n.p,{children:"Alright, let's now see how we can connect to an internal container running inside of our minikube pod.\nIn our case, let's connect to the container running our nginx server.\nIn order to connect to a container, you could use either the id of the image, or the name of the image. You can get the id same as we did above:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker ps\n"})}),"\n",(0,a.jsx)(n.p,{children:"Grab the id, and then do:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"docker exec -it <image-id> sh\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Note that this is a docker command (and you should recognize it).",(0,a.jsx)(n.br,{}),"\n","You notice that you're inside the container when the terminal suddenly appears as such:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"> _\n"})}),"\n",(0,a.jsx)(n.p,{children:"Inside the bash you can run several useful commands, such as:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"hostname\n"})}),"\n",(0,a.jsx)(n.p,{children:"and get back as a response:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"nginx\n"})}),"\n",(0,a.jsxs)(n.p,{children:["which is actually the name of the pod.",(0,a.jsx)(n.br,{}),"\n","And you can even get the IP address of this container:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"hostname -i\n"})}),"\n",(0,a.jsx)(n.p,{children:"And get back as a response:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"172.17.0.3\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now let's try to send a request to the server which is running inside of this container where we are currently in, by using curl and the above ip address:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"curl 172.17.0.3\n"})}),"\n",(0,a.jsx)(n.p,{children:'This should spit out the famous "Welcome to nginx!" html which is being returned when you hit the nginx gateway. This is simply to say that nginx is up and running.\nNow, by typing the command:'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"exit\n"})}),"\n",(0,a.jsx)(n.p,{children:"You get out of the nginx container, but you're are still inside the pod running that container. Let's exit from this connection as well:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"exit\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now let's run the command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Kubectl get pod -o wide\n"})}),"\n",(0,a.jsx)(n.p,{children:"You should get back the response:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES\nnginx 1/1 Running 0 62m 172.17.0.3 minikube <none> <none>\n"})}),"\n",(0,a.jsx)(n.p,{children:"With that command you can also get back the IP address of a particular pod.\nHere we can see the same IP address we saw earlier inside the container. If there are several containers inside the pod, they will all share that same IP address."}),"\n",(0,a.jsx)(n.p,{children:"Alright!\nSo we've just created our first pod in our kubernetes cluster, and we also explored getting some details about that pod."}),"\n",(0,a.jsx)(n.p,{children:"Before moving forward, let's first delete the pod we created earlier.\nTo delete a pod, use this command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl delete pod POD_NAME\n"})}),"\n",(0,a.jsx)(n.p,{children:"So in our case:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl delete pod nginx\n"})}),"\n",(0,a.jsx)(n.p,{children:"You should get back the following response saying:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pod nginx deleted\n"})}),"\n",(0,a.jsx)(n.p,{children:"After that the pod will be gone! All volumes, all namespaces related to this particular pod will be removed."}),"\n",(0,a.jsx)(n.h3,{id:"-step-9-create-a-deployment",children:"\u2022 Step 9: create a deployment"}),"\n",(0,a.jsxs)(n.p,{children:["We've talked about how creating pods using the ",(0,a.jsx)(n.code,{children:"kubectl run"})," command is not very practical, and that you should always aim to create deployments. A deployment will be responsible for the creation of the pods. All pods inside a deployment are exactly the same! A deployment is meant for creating multiple copies of the same pod to distribute load across different nodes within the kubernetes cluster. That's the whole purpose of the deployment."]}),"\n",(0,a.jsx)(n.p,{children:"Now let's go ahead and create a deployment, with the same image we used before - nginx."}),"\n",(0,a.jsx)(n.p,{children:"We will begin by giving only one copy at first, to sort of replay what we did earlier with the kubectl run command, and after that we'll examine a deployment with multiple copies, and also we'll create a service for this deployment, in order to be able to connect to our deployment from the outside world.\nLet's go ahead and create a deployment."}),"\n",(0,a.jsx)(n.p,{children:"To create a deployment, run the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl create deployment DEPLOYMENT_NAME --image=IMAGE_NAME\n"})}),"\n",(0,a.jsx)(n.p,{children:"Let's create an example deployment called:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl create deployment nginx-deployment --image=nginx\n"})}),"\n",(0,a.jsx)(n.p,{children:"The response should appear as:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"deployment.apps/nginx-deployment created\n"})}),"\n",(0,a.jsx)(n.p,{children:"Next, let's get all deployments with the command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl get deployments\n"})}),"\n",(0,a.jsx)(n.p,{children:"The response we'd get back is:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"NAME                READY   UP-TO-DATE  AVAILABLE   AGE\nnginx-deployment    1/1   1             1           2m35s\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Here we see our single deployment, which is ready and up-to-date.",(0,a.jsx)(n.br,{}),"\n",'Now let\'s run the command "get pods":']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl get pods\n"})}),"\n",(0,a.jsx)(n.p,{children:"The response back should be something like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"NAME READY STATUS RESTARTS AGE\nnginx 1/1 Running 1 (6m29s ago) 24h\nnginx-deployment-85c6 1/1 Running 0 5m3s\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We see that there is now a single pod, which is managed by this particular deployment. The pod was created automatically, as a result of us creating the deployment. Right now we only have the 1 pod in our deployment, but we now have the option to scale, and increase the quantity of the pods.",(0,a.jsx)(n.br,{}),"\n","Before we do that, let's first read some details about the deployment:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl describe deployment DEPLOYMENT_NAME\n"})}),"\n",(0,a.jsx)(n.p,{children:"So in our case, it's:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl describe deployment nginx-deployment\n"})}),"\n",(0,a.jsx)(n.p,{children:"And we should get back a response like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Name: nginx-deployment\nNamespace: default\nCreationTimestamp: Thu, 15 Sep 2022 23:33:18 +0300\nLabels: app=nginx-deployment\nAnnotations: deployment.kubernetes.io/revision: 1\nSelector: app=nginx-deployment\nReplicas: 1 desired | 1 updated | 1 total | 1 available | 0 unavailable\nStrategyType: RollingUpdate\nMinReadySeconds: 0\nRollingUpdateStrategy: 25% max unavailable, 25% max surge\nPod Template:\nLabels: app=nginx-deployment\nContainers:\nnginx:\nImage: nginx\nPort: <none>\nHost Port: <none>\nEnvironment: <none>\nMounts: <none>\nVolumes: <none>\nConditions:\nType Status Reason\n\n---\n\nAvailable True MinimumReplicasAvailable\nProgressing True NewReplicaSetAvailable\nOldReplicaSets: <none>\nNewReplicaSet: nginx-deployment-85c6d5f6dd (1/1 replicas created)\nEvents:\nType Reason Age From Message\n\n---\n\nNormal ScalingReplicaSet 11m deployment-controller Scaled up replica set nginx-deployment-85c6d5f6dd to 1\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"If you scroll up, you could see above the following information:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Name of the deployment"}),": A name which was given by the developer.\nThe namespace where such deployment was created. In our case - default namespace."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Label"}),": Notice that kubernetes automatically assigned labels to this particular deployment, and there's just a single label: app=nginx-deployment"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Annotations"}),": Created automatically."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Selectors"}),": Selectors are used in order to connect pods with deployment, because in kubernetes, pod & deployment are actually separate objects, and we have to know how to assign specific pods to particular deployments. Here, in our case, we see a"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:'selector: app=nginx-deployment. For this particular pod, which was automatically created and assigned to this deployment, we will find a label with the same value of "app=nginx-deployment".'}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Replicas"}),": here you could find information about the number of the pods which are desired by this deployment, and number of pods which are currently running. In our case we only have a single pod, i.e. a single replica, which is desired, 1 updated, 1 in total, and 1 available. It means that now there is 1 pod which is assigned to this deployment."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"StrategyType"}),': Here we see the value "RollingUpdate". This field tells how to perform updated of deployments. We will get back to it a bit later in this course.']}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Pod Template"}),': notice the corresponding label here, which is "app=nginx-deployment", the same label that is mentioned in the label field. As I\'ve mentioned, that\'s how the deployment is connected to the particular pods.\nEvents: events related to this particular deployment. Here in our case, we can see a single event called "ScalingReplicaSet". But what is a Replica Set? A bit above the event field you see a field called "NewReplicaSet".']}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"NewReplicaSet"}),": a replica set actually manages all pods related to deployment, and a replica set is a set of replicas of your application, because you could create 5, 10, 100 different pods in the same deployment, and all of them are included in the replica set. In our case we see ",(0,a.jsx)(n.code,{children:"nginx-deployment-<some-id>"}),'. And that why we see here under events, such replica with a message saying "scaled up to 1", meaning 1 pod. One pod was created in this replica set.']}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Alright, so that's it for the details about our deployment."}),"\n",(0,a.jsxs)(n.p,{children:["Notice that when we ran the command ",(0,a.jsx)(n.code,{children:"kubectl get pods"})," we saw the name for the pod inside the deployment. If you look closely at its name, you'll see that it's a string that starts with the name of the replica set, which we just discussed, and then it ends with a hash that's unique to this specific pod. If there were multiple pods in the same deployment, you'll see the same hash prefix for the replica set part, but a different pod hash at the end that states \"this is a different pod\"."]}),"\n",(0,a.jsx)(n.h3,{id:"-step-10-scale-a-deployment",children:"\u2022 Step 10: scale a deployment"}),"\n",(0,a.jsx)(n.h3,{id:"-scale-up",children:"\u25cb Scale up"}),"\n",(0,a.jsxs)(n.p,{children:["Now let's try to scale this deployment, and increase the number of pods living inside our deployment. Currently, it only holds a single pod. let's make it 2, or even 3.\nFor that we can use the ",(0,a.jsx)(n.code,{children:"scale"})," command:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl scale deployment DEPLOYMENT_NAME --replicas=#number\n"})}),"\n",(0,a.jsxs)(n.p,{children:["let's try this out on our nginx-deployment deployment:\ndeployment.apps/nginx-deployment scaledWe should get back a message saying:\ndeployment.apps/nginx-deployment scaled\nAlright! Let's check that it worked!\nLet's run the ",(0,a.jsx)(n.code,{children:"get pods"})," command and see what we get:\nkubectl get pods\nAnd here's the output:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"NAME READY STATUS RESTARTS AGE\nnginx 1/1 Running 1 (11h ago) 35h\nnginx-deployment-85c6d5f6dd-j4ld4 0/1 Creating 0 95s\nnginx-deployment-85c6d5f6dd-nvfqx 0/1 Creating 0 95s\nnginx-deployment-85c6d5f6dd-qmxj7 0/1 Creating 0 95s\nnginx-deployment-85c6d5f6dd-rvz4k 1/1 Running 0 11h\nnginx-deployment-85c6d5f6dd-xtwvw 0/1 Creating 0 95s\n"})}),"\n",(0,a.jsx)(n.p,{children:"From the output above we gather that there are 4 new containers, which are currently being created. If we wait long enough and ran the command again, we're bound to see:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"NAME READY STATUS RESTARTS AGE\nnginx 1/1 Running 1 (11h ago) 35h\nnginx-deployment-85c6d5f6dd-j4ld4 1/1 Running 0 95s\nnginx-deployment-85c6d5f6dd-nvfqx 1/1 Running 0 95s\nnginx-deployment-85c6d5f6dd-qmxj7 1/1 Running 0 95s\nnginx-deployment-85c6d5f6dd-rvz4k 1/1 Running 0 11h\nnginx-deployment-85c6d5f6dd-xtwvw 1/1 Running 0 95s\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We just scaled our deployment to 5 different replicas. That are 5 different pods running right now inside of our kubernetes cluster. Notice how easy it is? We did not create those pod manually, kubernetes scaled this deployment automatically for us. Also notice how all those new pods have the same prefix, which is the name of the replicaSet, and how each pod has its own hash at the end.\nI want to print it in another way now, one that shows the IP address of each pod. Remember we saw a command that does this? It's the same ",(0,a.jsx)(n.code,{children:"get pods"})," command, only with the ",(0,a.jsx)(n.code,{children:"-o wide"})," addition:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"kubectl get pods -o wide\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"NAME READY STATUS AGE IP NODE NOMINATED NODE READINESS\nnginx 1/1 Running 36h 172.17.0.3 minikube <none> <none>\nnginx-deployment-85c6d5f6dd-j4ld4 1/1 Running 11m 172.17.0.8 minikube <none> <none>\nnginx-deployment-85c6d5f6dd-nvfqx 1/1 Running 11m 172.17.0.6 minikube <none> <none>\nnginx-deployment-85c6d5f6dd-qmxj7 1/1 Running 11m 172.17.0.5 minikube <none> <none>\nnginx-deployment-85c6d5f6dd-rvz4k 1/1 Running 11h 172.17.0.4 minikube <none> <none>\nnginx-deployment-85c6d5f6dd-xtwvw 1/1 Running 11m 172.17.0.7 minikube <none> <none>\n"})}),"\n",(0,a.jsx)(n.p,{children:"And this lets us see how each pod has a different IP address."}),"\n",(0,a.jsx)(n.h3,{id:"-scale-down",children:"\u25cb Scale Down"}),"\n",(0,a.jsxs)(n.p,{children:["We just saw how we can scale up from 1 pod to 2+ pods, but it was all actually a part of the kubernetes ",(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.em,{children:"scaling up mechanism"})}),". When you're scaling up with kubectl, you are creating more pods, meaning more pods would be added, and go through a ",(0,a.jsx)(n.em,{children:"CreatingContainer"})," stage. However, if you scale down, from let's say 5 to 2, then 3 pods would simply be removed, and you'd be left with 2 out of the 5 pods in a running state. No new pods need to be created! How cool is that?! And of course - efficient."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},5985:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/minikube-cluster-8bf99b83a9264c730f4814388d27dad1.png"},3546:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>r});var i=s(9729);const a={},t=i.createContext(a);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);