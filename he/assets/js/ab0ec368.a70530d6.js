"use strict";(self.webpackChunkdocusaurus_guides=self.webpackChunkdocusaurus_guides||[]).push([[3339],{4310:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"programming/typescript","title":"Typescript","description":"1. Enum as const","source":"@site/docs/programming/typescript.md","sourceDirName":"programming","slug":"/programming/typescript","permalink":"/guides/he/docs/programming/typescript","draft":false,"unlisted":false,"editUrl":"https://github.com/talkohavy/guides/docs/programming/typescript.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mySidebar","previous":{"title":"- React Testing Library","permalink":"/guides/he/docs/programming/tests/react-testing-library"},"next":{"title":"- Web","permalink":"/guides/he/docs/web"}}');var i=t(5813),r=t(3546);const o={},a="Typescript",p={},c=[{value:"1. Enum as const",id:"1-enum-as-const",level:2},{value:"2. Prettify",id:"2-prettify",level:2},{value:"3. Extract, Exclude, Pick &amp; Omit",id:"3-extract-exclude-pick--omit",level:2},{value:"4. Key Optional V.S. Value Optional",id:"4-key-optional-vs-value-optional",level:2},{value:"5. Mapped Types",id:"5-mapped-types",level:2},{value:"6. Immediately Indexed Mapped Types",id:"6-immediately-indexed-mapped-types",level:2},{value:"7. function isCat(props: Animal): props is Cat",id:"7-function-iscatprops-animal-props-is-cat-",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"typescript",children:"Typescript"})}),"\n",(0,i.jsx)(n.h2,{id:"1-enum-as-const",children:"1. Enum as const"}),"\n",(0,i.jsx)(n.p,{children:"How to create an enum without using Enum keyword:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export const ROUTES = {\n  Home: '/',\n  Admin: '/admin',\n  Users: '/users',\n} as const;\n\ntype TypeOfRoutes = typeof ROUTES;\nexport type KeysOfRoutes = keyof TypeOfRoutes; // <--- Use when need the key on the enum that's used to retrieve the value.\nexport type RoutesEnumType = TypeOfRoutes[KeysOfRoutes]; // <--- Use when in need of enum value\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"as const"})," makes objects ",(0,i.jsx)(n.code,{children:"readonly"}),". It is telling the IDE that this object cannot be changed. Meaning that trying to modify a key's value later would result in a typescript error. You'll might notice that we could have used ",(0,i.jsx)(n.code,{children:"Object.freeze()"}),". It does the same thing, and it works on the type level too. There are 2 main differences though. One is that it also prevents modifications at runtime as well, and two, that it only prevents modifications of values on the top-level keys."]}),"\n",(0,i.jsxs)(n.p,{children:["Next up, we have ",(0,i.jsx)(n.code,{children:"TypeOfRouts"}),". Since ",(0,i.jsx)(n.code,{children:"routes"})," is a variable inited with the ",(0,i.jsx)(n.code,{children:"const"})," keyword, it's in the javascript world. But we need its type, so we need to move it to the typescript world. For that we use the typeof ",(0,i.jsx)(n.code,{children:"keyword"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-prettify",children:"2. Prettify"}),"\n",(0,i.jsx)(n.p,{children:"You can create a type prettifier yourself:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"// Define Prettify: a utility type that makes the type more readable\nexport type Prettify<T> = {\n  [K in keyof T]: T[K];\n} & {};\n\n// ---------------------\n\n// Example usage:\n\ntype ComplexType = {\n  name: string;\n  age: number;\n  location: string;\n} & Omit<\n  {\n    c: string;\n    hobbies: string[];\n    isActive: boolean;\n  },\n  'c'\n> &\n  Record<'metadata', string[]>;\n\nexport type PrettyComplexType = Prettify<ComplexType>;\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-extract-exclude-pick--omit",children:"3. Extract, Exclude, Pick & Omit"}),"\n",(0,i.jsx)(n.p,{children:"Extract and exclude are for Unions, Pick & Omit are for objects."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"type User = {\n  id: number;\n  name: string;\n  age: number;\n};\n\nexport type UserWithoutId = Omit<User, 'id'>;\nexport type UserWithId = Pick<User, 'id'>;\n\n// -----------------------------------\n\ntype TypeA = {\n  type: 'aaa';\n  body: {\n    id: number;\n    name: string;\n  };\n};\n\ntype TypeB = {\n  type: 'bbb';\n  body: {\n    scriptId: number;\n  };\n};\n\ntype TypeC = {\n  type: 'ccc';\n  body: {\n    location: string;\n  };\n};\n\ntype AllTypes = TypeA | TypeB | TypeC;\n\nexport type TwoTypes = Exclude<AllTypes, TypeA | TypeB>;\nexport type OneType = Exclude<AllTypes, TypeA | TypeB | TypeC>;\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4-key-optional-vs-value-optional",children:"4. Key Optional V.S. Value Optional"}),"\n",(0,i.jsxs)(n.p,{children:["Try switching the ",(0,i.jsx)(n.code,{children:"traceId"})," of ",(0,i.jsx)(n.code,{children:"doThing"})," & ",(0,i.jsx)(n.code,{children:"doAnotherThing"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"/**\n * Key Optional V.S. Value Optional\n */\n\ntype MainProps = {\n  traceId?: string;\n};\nfunction main(props: MainProps) {\n  const { traceId } = props;\n\n  doThing({ traceId });\n  doAnotherThing({ traceId });\n}\n\ntype DoThingProps = {\n  traceId?: string;\n  // traceId: string | undefined;\n};\nfunction doThing(props: DoThingProps) {\n  const { traceId } = props;\n\n  console.log('traceId is:', traceId);\n}\n\ntype DoAnotherThingProps = {\n  traceId?: string;\n  // traceId: string | undefined;\n};\nfunction doAnotherThing(props: DoAnotherThingProps) {\n  const { traceId } = props;\n\n  console.log('traceId is:', traceId);\n}\n\nmain({ traceId: '12345' });\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"5-mapped-types",children:"5. Mapped Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"type User = {\n  id: number;\n  name: string;\n  age: number;\n};\n\n// --------------------\n\nexport type TransformedUser1 = {\n  [K in keyof User]: K;\n};\n\nexport type TransformedUser2 = {\n  [K in keyof User as K]: User[K];\n};\n\nexport type TransformedUser3 = {\n  readonly [K in keyof User]?: User[K];\n};\n\nexport type TransformedUser4 = {\n  readonly [K in keyof User as `get${Capitalize<K>}`]: () => User[K];\n};\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"6-immediately-indexed-mapped-types",children:"6. Immediately Indexed Mapped Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { Prettify } from './prettify';\n\n// The example type:\ntype Actions = {\n  login: {\n    username: string;\n    password: string;\n  };\n  logout: {\n    reason: string;\n  };\n  updateProfile: {\n    userId: number;\n    profileData: {\n      name: string;\n      email: string;\n      age: number;\n    };\n  };\n};\n\n// ---------------------------------\n\nexport type ActionsAsUnion1 = {\n  [K in keyof Actions]: any;\n};\n\nexport type ActionsAsUnion2 = {\n  [K in keyof Actions]: {\n    type: K;\n  };\n};\n\nexport type ActionsAsUnion3 = {\n  [K in keyof Actions]: {\n    type: K;\n  } & Actions[K];\n};\n\nexport type ActionsAsUnion4 = {\n  [K in keyof Actions]: Prettify<\n    {\n      type: K;\n    } & Actions[K]\n  >;\n};\n\n// And finally, here we're using the immediately indexed mapped types (IIMP)\nexport type ActionsAsUnion5 = {\n  [K in keyof Actions]: Prettify<\n    {\n      type: K;\n    } & Actions[K]\n  >;\n}[keyof Actions];\n\n// This is ALMOST the same as doing:\nexport type ActionsAsUnion6 = Actions['login' | 'logout' | 'updateProfile'];\n// or just:\nexport type ActionsAsUnion7 = Actions[keyof Actions];\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"7-function-iscatprops-animal-props-is-cat-",children:"7. function isCat(props: Animal): props is Cat "}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"type Cat = {\n  message: string;\n  age: number;\n  type: string;\n};\n\ntype Dog = {\n  id: number;\n  age: number;\n  email: string;\n};\n\ntype Animal = Cat | Dog;\n\nfunction getIsCat(animal: Animal): animal is Cat {\n  return 'message' in animal;\n}\n\nconst animal = { message: 'Hello, world!', type: 'doSomething' } as any;\nconst isCat = getIsCat(animal);\n\nif (isCat) {\n  console.log(animal.message); // <--- would infer as Cat, showing only Cat fields.\n} else {\n  // could be anything! Not necessarily a Dog! Inference does not work here.\n}\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},3546:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(9729);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);