"use strict";(self.webpackChunkdocusaurus_guides=self.webpackChunkdocusaurus_guides||[]).push([[3381],{908:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"programming/devops/circleci/using-contexts","title":"Using Contexts","description":"Contexts provide a mechanism for securing and sharing environment variables across projects. The environment variables are defined as name/value pairs and are injected at runtime. This document describes creating and using contexts in CircleCI.","source":"@site/docs/programming/devops/circleci/using-contexts.md","sourceDirName":"programming/devops/circleci","slug":"/programming/devops/circleci/using-contexts","permalink":"/guides/he/docs/programming/devops/circleci/using-contexts","draft":false,"unlisted":false,"editUrl":"https://github.com/talkohavy/guides/docs/programming/devops/circleci/using-contexts.md","tags":[],"version":"current","frontMatter":{}}');var o=t(5813),r=t(3546);const c={},i="Using Contexts",a={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"using-contexts",children:"Using Contexts"})}),"\n",(0,o.jsx)(n.p,{children:"Contexts provide a mechanism for securing and sharing environment variables across projects. The environment variables are defined as name/value pairs and are injected at runtime. This document describes creating and using contexts in CircleCI.\nYou can create and manage contexts on the Organization Settings page of the CircleCI web app. You must be an organization member to view, create, or edit contexts. After a context has been created, you can use the context key in the workflows section of a project\nconfig.yml file to give any job(s) access to the environment variables associated with the context, as shown in the image below."}),"\n",(0,o.jsx)(n.p,{children:"Org:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Context: my-context\n$MY_ENV_VAR = my_value\n"})}),"\n",(0,o.jsx)(n.p,{children:"Project:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"version: 2.1\n\nworkflows:\n  build:\n    jobs:\n      - build:\n          context:\n            - my-context\n            - another-context\n\njobs:\n  build:\n    docker:\n      - image: <image-name>:<version TAG>\n    steps: # use env var from Context\n      - run: echo $MY_ENV_VAR\n"})}),"\n",(0,o.jsx)(n.p,{children:"Job Output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"echo $MY_ENV_VAR\n\n*******\n"})}),"\n",(0,o.jsx)(n.p,{children:"Here's an example from your code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'workflows:\n\xa0 build_and_test:\n\xa0 \xa0 jobs:\n\xa0 \xa0 \xa0 - build:\n\xa0 \xa0 \xa0 \xa0 \xa0 context: luckylove\n\xa0 \xa0 \xa0 - test:\n\xa0 \xa0 \xa0 \xa0 \xa0 requires:\n\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 - build\n\njobs:\n\xa0 build:\n\xa0 \xa0 executor: nodejs\n\xa0 \xa0 working_directory: ~/luckylove_frontend\n\xa0 \xa0 steps:\n\xa0 \xa0 \xa0 - checkout\n\xa0 \xa0 \xa0 - run:\n\xa0 \xa0 \xa0 \xa0 \xa0 name: "Step 0: check context variables"\n\xa0 \xa0 \xa0 \xa0 \xa0 command: echo $TOP_SECRET\n'})}),"\n",(0,o.jsxs)(n.p,{children:["As you can see, I gave the ",(0,o.jsx)(n.code,{children:"build"})," jobs the context of ",(0,o.jsx)(n.code,{children:"luckylove"})," only at runtime! At the time of defining it, it had no clue what its context is gonna be."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},3546:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var s=t(9729);const o={},r=s.createContext(o);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);