"use strict";(self.webpackChunkdocusaurus_guides=self.webpackChunkdocusaurus_guides||[]).push([[8774],{7752:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"programming/databases/mongodb","title":"MongoDB","description":"1. Installing mongoDB","source":"@site/docs/programming/databases/mongodb.md","sourceDirName":"programming/databases","slug":"/programming/databases/mongodb","permalink":"/guides/he/docs/programming/databases/mongodb","draft":false,"unlisted":false,"editUrl":"https://github.com/talkohavy/guides/docs/programming/databases/mongodb.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mySidebar","previous":{"title":"- ElasticSearch","permalink":"/guides/he/docs/programming/databases/elasticsearch"},"next":{"title":"- Postgres","permalink":"/guides/he/docs/programming/databases/postgres-sql"}}');var o=s(6070),r=s(7010);const i={},t="MongoDB",d={},l=[{value:"1. Installing mongoDB",id:"1-installing-mongodb",level:2},{value:"- Run a mongoDB server using docker",id:"--run-a-mongodb-server-using-docker",level:3},{value:"2. Test Server Connectivity",id:"2-test-server-connectivity",level:2},{value:"3. Run Basic MongoDB commands",id:"3-run-basic-mongodb-commands",level:2},{value:"- command 1: adminCommand",id:"--command-1-admincommand",level:3},{value:"The command&#39;s form",id:"the-commands-form",level:4},{value:"Description",id:"description",level:4},{value:"- command 2: show all existing databases",id:"--command-2-show-all-existing-databases",level:3},{value:"The command&#39;s form",id:"the-commands-form-1",level:4},{value:"Description",id:"description-1",level:4},{value:"- command 3: use",id:"--command-3-use",level:3},{value:"The command&#39;s form",id:"the-commands-form-2",level:4},{value:"Description",id:"description-2",level:4},{value:"- command 4: show collections",id:"--command-4-show-collections",level:3},{value:"The command&#39;s form",id:"the-commands-form-3",level:4},{value:"Description",id:"description-3",level:4},{value:"-command 5: find",id:"-command-5-find",level:3},{value:"The command&#39;s form",id:"the-commands-form-4",level:4},{value:"Description",id:"description-4",level:4},{value:"-command 6: findOne",id:"-command-6-findone",level:3},{value:"The command&#39;s form",id:"the-commands-form-5",level:4},{value:"Description",id:"description-5",level:4},{value:"-command 7: count",id:"-command-7-count",level:3},{value:"The command&#39;s form",id:"the-commands-form-6",level:4},{value:"Description",id:"description-6",level:4},{value:"-command 8: pretty",id:"-command-8-pretty",level:3},{value:"The command&#39;s form",id:"the-commands-form-7",level:4},{value:"Description",id:"description-7",level:4},{value:"4. Most Used Commands",id:"4-most-used-commands",level:2},{value:"- Way Number 1: Using MQL",id:"--way-number-1-using-mql",level:3},{value:"- Command 1: return the document with the <strong>MAX/MIN HIGHEST SCORE</strong>",id:"--command-1-return-the-document-with-the-maxmin-highest-score",level:4},{value:"- Command 2: return only the records which <strong>FIELD DOES/DOESN&#39;T EXISTS</strong>",id:"--command-2-return-only-the-records-which-field-doesdoesnt-exists",level:4},{value:"- Command 3: Does a field exist, is of type array, and <strong>ARRAY CONTAINS AT LEAST ONE ELEMENT</strong>?",id:"--command-3-does-a-field-exist-is-of-type-array-and-array-contains-at-least-one-element",level:4},{value:"- Command 4: <strong>COUNT HOW MANY</strong> records are there that answer QUERY",id:"--command-4-count-how-many-records-are-there-that-answer-query",level:4},{value:"- Command 5: return documents which FIELD IS NOT EQUAL TO some value",id:"--command-5-return-documents-which-field-is-not-equal-to-some-value",level:4},{value:"- Command 6: return documents and PROJECT ONLY SOME FIELDS",id:"--command-6-return-documents-and-project-only-some-fields",level:4},{value:"- Command 1: <strong>ADD NEW FIELD</strong> to one/many/all documents",id:"--command-1-add-new-field-to-onemanyall-documents",level:4},{value:"- Command 2: <strong>DELETE AN EXISTING FIELD</strong> from all (similar to MySql&#39;s DROP COLUMN)",id:"--command-2-delete-an-existing-field-from-all-similar-to-mysqls-drop-column",level:4},{value:"- Command 3: <strong>ADD SUB-DOCUMENT TO ARRAY</strong> field",id:"--command-3-add-sub-document-to-array-field",level:4},{value:"- Command 4: <strong>DELETE SUB-DOCUMENT FROM ARRAY</strong> field",id:"--command-4-delete-sub-document-from-array-field",level:4},{value:"- Way Number 2: Using Aggregation Pipelines",id:"--way-number-2-using-aggregation-pipelines",level:3},{value:"- Command 1: ...",id:"--command-1-",level:4},{value:"- Command 1: Set field equal to another field",id:"--command-1-set-field-equal-to-another-field",level:4},{value:"- Command 2: Unset a field",id:"--command-2-unset-a-field",level:3},{value:"- Command 3: Update a specific object inside an array field",id:"--command-3-update-a-specific-object-inside-an-array-field",level:3},{value:"- Part 1: <code>$[&lt;identifier&gt;]</code>",id:"--part-1-identifier",level:3},{value:"- Part 2: arrayFilters",id:"--part-2-arrayfilters",level:3}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"mongodb",children:"MongoDB"})}),"\n",(0,o.jsx)(n.h2,{id:"1-installing-mongodb",children:"1. Installing mongoDB"}),"\n",(0,o.jsx)(n.h3,{id:"--run-a-mongodb-server-using-docker",children:"- Run a mongoDB server using docker"}),"\n",(0,o.jsx)(n.p,{children:"Go to the Official Image of mongo:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://hub.docker.com/_/mongo",children:"https://hub.docker.com/_/mongo"})}),"\n",(0,o.jsx)(n.p,{children:'In the "How to use this image" section, you\'ll see the following command:'}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker run --name mongo -d -p 27017:27017 mongo:6\n"})}),"\n",(0,o.jsx)(n.p,{children:"Or with a password:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker run --name mongo -d -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=mongoadmin -e MONGO_INITDB_ROOT_PASSWORD=secret mongo\n"})}),"\n",(0,o.jsx)(n.p,{children:"And, if you wanna add extra security, use a certificate:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker run --name mongo -d \\\n  -p 27017:27017 \\\n  -e MONGO_INITDB_ROOT_USERNAME=mongoadmin \\\n  -e MONGO_INITDB_ROOT_PASSWORD=secret \\\n  -v ~/Desktop/certificates:/certs:ro \\\n  mongo \\\n  --tlsMode requireTLS \\\n  --tlsCertificateKeyFile /certs/server.pem \\\n  --tlsCAFile /certs/rootCA.crt\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["See how to create a certificate over at the ",(0,o.jsx)(n.a,{href:"/docs/programming/certificates#--step-1-create-2-private-keys---1-for-the-ca--1-for-the-server",children:"certificates guide"}),"."]})}),"\n",(0,o.jsxs)(n.p,{children:["You now should have a container running a ",(0,o.jsx)(n.strong,{children:"MongoDB server"})," listening on the standard MongoDB port ",(0,o.jsx)(n.strong,{children:"27017"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"In the next section we'll be testing the connection"})," to our server, stay tunned."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"2-test-server-connectivity",children:"2. Test Server Connectivity"}),"\n",(0,o.jsx)(n.p,{children:"Before using the CLI tool, check to see that the mongo server's logs are ok:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker logs mongo\n"})}),"\n",(0,o.jsx)(n.p,{children:"Or you can ssh into it using:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker exec -it mongo bash\n"})}),"\n",(0,o.jsx)(n.p,{children:"Second, make sure you have mongo CLI tool installed."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mongocli\n"})}),"\n",(0,o.jsx)(n.p,{children:"Or..."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mongosh\n"})}),"\n",(0,o.jsx)(n.p,{children:"If not, install it:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"- MacOS:"})}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"homebrew"})," to install (the official recommended way):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"brew install mongocli\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You now have access to the global command ",(0,o.jsx)(n.code,{children:"mongosh"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"- Windows:"})}),"\n",(0,o.jsxs)(n.p,{children:["Go to: ",(0,o.jsx)(n.a,{href:"https://www.mongodb.com/docs/mongocli/current/",children:"https://www.mongodb.com/docs/mongocli/current/"})]}),"\n",(0,o.jsxs)(n.p,{children:["And hit ",(0,o.jsx)(n.strong,{children:"Install MongoDB CLI"}),", then hit the ",(0,o.jsx)(n.strong,{children:"Download"})," button."]}),"\n",(0,o.jsx)(n.p,{children:"Once installed, run the following command in your terminal:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'mongosh "mongodb://localhost:27017"\n'})}),"\n",(0,o.jsx)(n.p,{children:"Or, if you have a password:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mongosh --host localhost:27017 --username mongoadmin --password secret --authenticationDatabase admin\n"})}),"\n",(0,o.jsx)(n.p,{children:"Or, if you have a certificate:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mongosh --tls --tlsCAFile rootCA.crt --tlsCertificateKeyFile client.pem --host localhost:27017 --username mongoadmin --password secret --authenticationDatabase admin\n"})}),"\n",(0,o.jsx)(n.p,{children:"All of the commands below work as well:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mongosh localhost:27017\nmongosh mongodb://localhost:27017\nmongosh --host localhost --port 27017\nmongosh --host localhost:27017\nmongosh --host 127.0.0.1 --port 27017\n"})}),"\n",(0,o.jsx)(n.p,{children:"You should see the following output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"Current Mongosh Log ID:\t67909697207e4a089faba1d2\nConnecting to:\t\tmongodb://localhost:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.3.3\n(node:56199) ExperimentalWarning: CommonJS module /opt/homebrew/Cellar/mongosh/2.3.3/libexec/lib/node_modules/@mongosh/cli-repl/node_modules/@mongodb-js/devtools-proxy-support/dist/fetch.js is loading ES Module /opt/homebrew/Cellar/mongosh/2.3.3/libexec/lib/node_modules/@mongosh/cli-repl/node_modules/node-fetch/src/index.js using require().\nSupport for loading ES Module in require() is an experimental feature and might change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\nUsing MongoDB:\t\t6.0.20\nUsing Mongosh:\t\t2.3.3\n\nFor mongosh info see: https://www.mongodb.com/docs/mongodb-shell/\n\n------\n   The server generated these startup warnings when booting\n   2025-01-22T06:56:17.488+00:00: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem\n   2025-01-22T06:56:18.084+00:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted\n   2025-01-22T06:56:18.084+00:00: /sys/kernel/mm/transparent_hugepage/enabled is 'always'. We suggest setting it to 'never' in this binary version\n   2025-01-22T06:56:18.084+00:00: vm.max_map_count is too low\n------\n\ntest>\n"})}),"\n",(0,o.jsx)(n.p,{children:"You should now be able to run mongodb commands."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"3-run-basic-mongodb-commands",children:"3. Run Basic MongoDB commands"}),"\n",(0,o.jsx)(n.h3,{id:"--command-1-admincommand",children:"- command 1: adminCommand"}),"\n",(0,o.jsx)(n.h4,{id:"the-commands-form",children:"The command's form"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"db.adminCommand({ getCmdLineOpts: 1 })\n"})}),"\n",(0,o.jsx)(n.h4,{id:"description",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"Check to see all running configuration."}),"\n",(0,o.jsx)(n.h3,{id:"--command-2-show-all-existing-databases",children:"- command 2: show all existing databases"}),"\n",(0,o.jsx)(n.h4,{id:"the-commands-form-1",children:"The command's form"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"show dbs\n"})}),"\n",(0,o.jsx)(n.h4,{id:"description-1",children:"Description"}),"\n",(0,o.jsxs)(n.p,{children:["Shows a list of all the databases that are in the cluster.",(0,o.jsx)(n.br,{}),"\n",'Note! Do not touch the "admin" and the "local" databases.',(0,o.jsx)(n.br,{}),"\n","The ",(0,o.jsx)(n.code,{children:"admin"})," database stores all the user/s with admin privileges, that are able to connect to the cluster."]}),"\n",(0,o.jsx)(n.h3,{id:"--command-3-use",children:"- command 3: use"}),"\n",(0,o.jsx)(n.h4,{id:"the-commands-form-2",children:"The command's form"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"use dbName\n"})}),"\n",(0,o.jsx)(n.h4,{id:"description-2",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"Selects a specific database."}),"\n",(0,o.jsxs)(n.p,{children:["Note: If you use some ",(0,o.jsx)(n.code,{children:"dbName"}),' that doesn\'t exist, You\'ll still get a message saying "switched to\ndb dbName". But if you do "show dbs", you won\'t see it on the list. What this means is that mongoDB wanted to be so flexible as to say "Yeah, we\'re ready to create that db for you if you desire, but technically? right now? It doesn\'t exist".']}),"\n",(0,o.jsx)(n.h3,{id:"--command-4-show-collections",children:"- command 4: show collections"}),"\n",(0,o.jsx)(n.h4,{id:"the-commands-form-3",children:"The command's form"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"show collections\n"})}),"\n",(0,o.jsx)(n.h4,{id:"description-3",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"Shows all the collections in that specific database."}),"\n",(0,o.jsx)(n.h3,{id:"-command-5-find",children:"-command 5: find"}),"\n",(0,o.jsx)(n.h4,{id:"the-commands-form-4",children:"The command's form"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"db.collectionName.find(query);\n"})}),"\n",(0,o.jsx)(n.h4,{id:"description-4",children:"Description"}),"\n",(0,o.jsxs)(n.p,{children:["This is your way of showing documents that answer to your query's specifications. How to query? The ",(0,o.jsx)(n.code,{children:"find"})," function you saw above requires a query.\nThe query is actually a json object like so:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "country": "israel",\n  "city": "ramat gan"\n}\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["If there are more than 20 documents in the collection that match the query, know that only the first 20 will be shown as the result. To view the next 20 results type ",(0,o.jsx)(n.code,{children:"it"}),", which is short for ",(0,o.jsx)(n.em,{children:"iterate"}),", and press ",(0,o.jsx)(n.code,{children:"Enter"}),"."]})}),"\n",(0,o.jsx)(n.h3,{id:"-command-6-findone",children:"-command 6: findOne"}),"\n",(0,o.jsx)(n.h4,{id:"the-commands-form-5",children:"The command's form"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"db.collectionName.findOne(query);\n"})}),"\n",(0,o.jsx)(n.h4,{id:"description-5",children:"Description"}),"\n",(0,o.jsxs)(n.p,{children:["This is your way to find just one document that matches the query.",(0,o.jsx)(n.br,{}),"\n","If no query is inserted (empty query), a random document would get pulled."]}),"\n",(0,o.jsx)(n.h3,{id:"-command-7-count",children:"-command 7: count"}),"\n",(0,o.jsx)(n.h4,{id:"the-commands-form-6",children:"The command's form"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"db.collectionName.find(query).count();\n"})}),"\n",(0,o.jsx)(n.h4,{id:"description-6",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:'This is your way to answer the question "How many are there?".'}),"\n",(0,o.jsx)(n.h3,{id:"-command-8-pretty",children:"-command 8: pretty"}),"\n",(0,o.jsx)(n.h4,{id:"the-commands-form-7",children:"The command's form"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"db.collectionName.find(query).pretty();\n"})}),"\n",(0,o.jsx)(n.h4,{id:"description-7",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This is your way to present results in a more human-readable way."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"4-most-used-commands",children:"4. Most Used Commands"}),"\n",(0,o.jsx)(n.h3,{id:"--way-number-1-using-mql",children:"- Way Number 1: Using MQL"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)("font",{size:"4",children:"-- How to Query:"})})}),"\n",(0,o.jsxs)(n.h4,{id:"--command-1-return-the-document-with-the-maxmin-highest-score",children:["- Command 1: return the document with the ",(0,o.jsx)(n.strong,{children:"MAX/MIN HIGHEST SCORE"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'db.users.find({},{ _id: 0, userID: 1}).sort({"userID": -1}).limit(1)\n'})}),"\n",(0,o.jsxs)(n.h4,{id:"--command-2-return-only-the-records-which-field-doesdoesnt-exists",children:["- Command 2: return only the records which ",(0,o.jsx)(n.strong,{children:"FIELD DOES/DOESN'T EXISTS"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"db.users.find({ myField: { $exists : true } })\n"})}),"\n",(0,o.jsxs)(n.h4,{id:"--command-3-does-a-field-exist-is-of-type-array-and-array-contains-at-least-one-element",children:["- Command 3: Does a field exist, is of type array, and ",(0,o.jsx)(n.strong,{children:"ARRAY CONTAINS AT LEAST ONE ELEMENT"}),"?"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"db.users.find({ myArray : { $elemMatch : { $exists : true } } })\n"})}),"\n",(0,o.jsxs)(n.h4,{id:"--command-4-count-how-many-records-are-there-that-answer-query",children:["- Command 4: ",(0,o.jsx)(n.strong,{children:"COUNT HOW MANY"})," records are there that answer QUERY"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"db.users.find({<query>}).count()\n"})}),"\n",(0,o.jsx)(n.h4,{id:"--command-5-return-documents-which-field-is-not-equal-to-some-value",children:"- Command 5: return documents which FIELD IS NOT EQUAL TO some value"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"db.users.find({ userID: { $ne: 1 }})\n"})}),"\n",(0,o.jsx)(n.h4,{id:"--command-6-return-documents-and-project-only-some-fields",children:"- Command 6: return documents and PROJECT ONLY SOME FIELDS"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"db.users.find({} , { _id: 0, userID: 1, nickname: 1, email: 1 })\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)("font",{size:"4",children:"-- How to Update:"})})}),"\n",(0,o.jsx)(n.p,{children:"When you don't want to use other fields values as reference, you can use this simple MQL operations, that don't include an aggregation pipeline."}),"\n",(0,o.jsxs)(n.h4,{id:"--command-1-add-new-field-to-onemanyall-documents",children:["- Command 1: ",(0,o.jsx)(n.strong,{children:"ADD NEW FIELD"})," to one/many/all documents"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'db.users.updateMany( { } ,{ $set: { newField: "defaultValue" } } )\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"NOTE! If the field already exists, it overrides its contents."})}),"\n",(0,o.jsxs)(n.h4,{id:"--command-2-delete-an-existing-field-from-all-similar-to-mysqls-drop-column",children:["- Command 2: ",(0,o.jsx)(n.strong,{children:"DELETE AN EXISTING FIELD"})," from all (similar to MySql's DROP COLUMN)"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'db.grades.updateMany( { studentID: 1 , classID: 460 } , { $unset: { arr1: "" , arr2: "" } } )\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"NOTE! If the field doesn't exist? updateMany does nothing."})}),"\n",(0,o.jsxs)(n.h4,{id:"--command-3-add-sub-document-to-array-field",children:["- Command 3: ",(0,o.jsx)(n.strong,{children:"ADD SUB-DOCUMENT TO ARRAY"})," field"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"db.users.updateMany( { userID: 1 } , { $addToSet: { iWatched: { userID:306, ...values } } } )\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["NOTE! The ",(0,o.jsx)(n.code,{children:"$addToSet"})," doesn't really apply to an array containing sub-documents, in the sense that it will allow inserting a new sub-document with the same values."]})}),"\n",(0,o.jsxs)(n.h4,{id:"--command-4-delete-sub-document-from-array-field",children:["- Command 4: ",(0,o.jsx)(n.strong,{children:"DELETE SUB-DOCUMENT FROM ARRAY"})," field"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"db.users.updateMany( { userID: 1 } , { $pull: { iWatched: { userID: 306 } } } )\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"--way-number-2-using-aggregation-pipelines",children:"- Way Number 2: Using Aggregation Pipelines"}),"\n",(0,o.jsxs)(n.p,{children:["When you ",(0,o.jsx)(n.strong,{children:"NEED"})," to use other fields values as reference, you can use an aggregation pipeline MQL update operations. Though their names are the same (like $set and $unset), they work differently when inside a regular update or an aggregation pipeline update."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)("font",{size:"4",children:"-- How to Query:"})})}),"\n",(0,o.jsx)(n.h4,{id:"--command-1-",children:"- Command 1: ..."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"...\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)("font",{size:"4",children:"-- How to Update:"})})}),"\n",(0,o.jsx)(n.h4,{id:"--command-1-set-field-equal-to-another-field",children:"- Command 1: Set field equal to another field"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"$set"})," works exactly the same as it is in normal MQL update, only now you can use other fields values as references."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"db.users.updateMany(\n  {\n    userID: 354,\n  },\n  [\n    {\n      $set: {\n        'myPrefs.turnsMeOn': '$myDetails.turnsMeOn',\n        'myPrefs.inPurposeOf': '$myDetails.inPurposeOf',\n    },\n  },\n])\n"})}),"\n",(0,o.jsx)(n.h3,{id:"--command-2-unset-a-field",children:"- Command 2: Unset a field"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"$unset"})," works differently in aggregation than in normal MQL update. If you try to apply ",(0,o.jsx)(n.code,{children:"$unset"})," as its form in the normal MQL update within an aggregation update, you would get an error saying:"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"$unset"})," specification must be a string or an array"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The proper way of applying $unset in an aggregation pipeline update is either by giving it a string with the field's name to unset, or an array of names in case there's more than 1 field you'd like to unset:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"db.users.updateMany(\n{\n  userID: 354,\n},\n[\n  {\n    $unset: ['myDetails.turnsMeOn', 'myDetails.inPurposeOf']\n  }\n])\n"})}),"\n",(0,o.jsx)(n.h3,{id:"--command-3-update-a-specific-object-inside-an-array-field",children:"- Command 3: Update a specific object inside an array field"}),"\n",(0,o.jsx)(n.p,{children:"The full form:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"db.users.updateMany(\n  {\n    userID: 354,\n  },\n  {\n    $set: {\n      'messages.$[i].msgReadOnUnix': 1652348270,\n  },\n  {\n    arrayFilters: [\n      {\n        $and: [\n          { 'i.senderID': 306 },\n          { 'i.msgReadOnUnix': -1 },\n        ]\n      }\n    ]\n  }\n)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Explanation on how to use:"}),"\n",(0,o.jsxs)(n.h3,{id:"--part-1-identifier",children:["- Part 1: ",(0,o.jsx)(n.code,{children:"$[<identifier>]"})]}),"\n",(0,o.jsx)(n.p,{children:"To achieve this, we use a normal MQL update, along with the familiar $set operation, only with a little twist. To reference an array cell, we need to use a special syntax of $[IDENTIFIER]."}),"\n",(0,o.jsx)(n.p,{children:"Like so:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-mongo",children:"$set: { '<array>.$[<identifier>].fieldName': some-value }\n"})}),"\n",(0,o.jsx)(n.h3,{id:"--part-2-arrayfilters",children:"- Part 2: arrayFilters"}),"\n",(0,o.jsxs)(n.p,{children:["In the third object parameter of the update operator, we provide an ",(0,o.jsx)(n.code,{children:"arrayFilters"}),". ",(0,o.jsx)(n.code,{children:"arrayFilters"})," is a special operator, that contains the conditions that would help determine which object inside the array are going to be updated. arrayFilters has a complex behavior, so in order to learn how to use it we need to discuss its rules, and how it behaves."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"-- ARRAY FILTER RULES"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Must be an array\n",(0,o.jsx)(n.code,{children:"arrayFilters"})," is followed by an array structure --\x3e ",(0,o.jsx)(n.code,{children:"arrayFilters: []"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:['A single filter - an object inside the array\nThe array of arrayFilters contains objects which are filters. Now you must be thinking "Oh! Each object inside the array must be a filter in the sense that a filter means a single condition, that together have a relation of AND". Well... then no. Each object inside the array is a ',(0,o.jsx)(n.strong,{children:"reference to exactly one array"}),". What does it mean? Consider a case where you have an array of objects, and an object in that array contains another array within. MongoDB gives you a way to filter within that inner array! And that can be done by providing a ",(0,o.jsx)(n.strong,{children:"first"})," filter object that would filter by the first array, and a ",(0,o.jsx)(n.strong,{children:"second"})," filter object that would filter by the second array. In 99% percent of cases, you would have an arrayFilters that contains only 1 object in its top level. So now we know that the array of arrayFilters contains filter objects, that each object is a reference to an array in accordance to the level, and that in most cases we would only really need one filter for one top level array."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"AND"})," relation between ",(0,o.jsx)(n.strong,{children:"different"})," fields\nTo get an ",(0,o.jsx)(n.strong,{children:"AND"})," relation effect between ",(0,o.jsx)(n.strong,{children:"different"})," inner fields, we simply add them one after another, line by line, like so:"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"arrayFilters: [{\n  'i.userID': 306,\n  'i.lastUpdated': { $lt: 555 }\n}]\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"WARNING!"}),(0,o.jsx)(n.br,{}),"\n","This implicit way of writing the AND relation can cause issues if you're using the ",(0,o.jsx)(n.strong,{children:"same"})," field name twice!"]})}),"\n",(0,o.jsx)(n.p,{children:"In the example above, it is implied that we wish for an AND relation. We ask for userID 306 AND lastUpdated before 555. Even though the AND form has a default mode, you can always mention it explicitly:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"arrayFilters: [{\n  $and: [\n    { 'i.userID': 306 },\n    { 'i. lastUpdated':{ $lt: 555 }}\n}]\n"})}),"\n",(0,o.jsx)(n.p,{children:"Notice how many more notes need to be added to get the same result!"}),"\n",(0,o.jsxs)(n.ol,{start:"4",children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"AND"})," relation for the same key - duplicate key appearance"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["We saw that the filter in its default mode obscures an AND operation behind it, and that the filter has an object-like structure. Since the filter object is an object, a key ",(0,o.jsx)(n.strong,{children:"CANNOT"})," appear twice! It's not an error if it does, it's just that the last appearance of a key would override its predecessors."]}),"\n",(0,o.jsx)(n.p,{children:"Let's see an example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"arrayFilters: [{\n  'i.userID': 306,\n  'i.userID': 304,\n  'i.userID':{ $lt: 2 }\n}]\n"})}),"\n",(0,o.jsx)(n.p,{children:"In the example above, only the third one would be taken into account."}),"\n",(0,o.jsxs)(n.ol,{start:"5",children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"OR"})," relation between ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.em,{children:"all"})})," fields"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"To get the effect of an OR relation, you must use the explicit way, like so:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"To get the effect of an OR relation, you must use the explicit way, like so:\narrayFilters: [{\n  $or: [\n    { 'i.userID': 306 },\n    { 'i. lastUpdated':{ $lt: 555 }}\n}]\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},7010:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>t});var a=s(758);const o={},r=a.createContext(o);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);