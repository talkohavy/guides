"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4134],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),h=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=h(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=h(a),u=r,m=p["".concat(l,".").concat(u)]||p[u]||d[u]||o;return a?n.createElement(m,i(i({ref:t},c),{},{components:a})):n.createElement(m,i({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var h=2;h<o;h++)i[h]=a[h];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9684:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>h});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_label:"Design Patterns",sidebar_position:2,sidebar_class_name:"yellow"},i="Design Patterns",s={unversionedId:"programming/design-patterns",id:"programming/design-patterns",title:"Design Patterns",description:"1. Strategy Pattern",source:"@site/docs/programming/design-patterns.md",sourceDirName:"programming",slug:"/programming/design-patterns",permalink:"/guides/he/docs/programming/design-patterns",draft:!1,editUrl:"https://github.com/talkohavy/guides/docs/programming/design-patterns.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Design Patterns",sidebar_position:2,sidebar_class_name:"yellow"},sidebar:"tutorialSidebar",previous:{title:"Kubernetes",permalink:"/guides/he/docs/programming/kubernetes"},next:{title:"Git",permalink:"/guides/he/docs/programming/git"}},l={},h=[{value:"1. Strategy Pattern",id:"1-strategy-pattern",level:2},{value:"- A. The Strategy Pattern&#39;s Goal",id:"--a-the-strategy-patterns-goal",level:3},{value:"- B. Formal Definition",id:"--b-formal-definition",level:3},{value:"- C. The Problem At Hand",id:"--c-the-problem-at-hand",level:3},{value:"- D. The Solution: Composition",id:"--d-the-solution-composition",level:3},{value:"- E. Dependency Injection",id:"--e-dependency-injection",level:3},{value:"2. Observer Pattern",id:"2-observer-pattern",level:2},{value:"- A. Definition",id:"--a-definition",level:3},{value:"- B. Push v.s. Pull",id:"--b-push-vs-pull",level:3},{value:"- C. The Pull Method",id:"--c-the-pull-method",level:3},{value:"- D. We need to Register",id:"--d-we-need-to-register",level:3},{value:"- E. Variations of the Observer Pattern",id:"--e-variations-of-the-observer-pattern",level:3},{value:"999. Bridge Pattern",id:"999-bridge-pattern",level:2},{value:"A. What is the Goal of the Bridge Pattern?",id:"a-what-is-the-goal-of-the-bridge-pattern",level:3},{value:"B. The interface segregation principle",id:"b-the-interface-segregation-principle",level:3}],c={toc:h},p="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"design-patterns"},"Design Patterns"),(0,r.kt)("h2",{id:"1-strategy-pattern"},"1. Strategy Pattern"),(0,r.kt)("h3",{id:"--a-the-strategy-patterns-goal"},"- A. The Strategy Pattern's Goal"),(0,r.kt)("p",null,"What is the Goal of the Strategy Pattern?",(0,r.kt)("br",{parentName:"p"}),"\n","This is probably the simplest pattern.",(0,r.kt)("br",{parentName:"p"}),"\n","In short, it is about using composition instead of using inheritance.",(0,r.kt)("br",{parentName:"p"}),"\n","It's about understanding that inheritance is NOT intended for code reuse.  "),(0,r.kt)("h3",{id:"--b-formal-definition"},"- B. Formal Definition"),(0,r.kt)("p",null,"The strategy pattern defined a family of algorithms, encapsulates each one, and makes them interchangeable.",(0,r.kt)("br",{parentName:"p"}),"\n","Strategy lets the algorithm vary independently from clients that use it."),(0,r.kt)("h3",{id:"--c-the-problem-at-hand"},"- C. The Problem At Hand"),(0,r.kt)("p",null,"The problem at hand is us having Objects with some shared traits, where each trait can either be exactly the same, or just conceptually the same but with a different implementation.",(0,r.kt)("br",{parentName:"p"}),"\n","Also, each object can have more traits than those common ones."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("font",{size:"4"},"Question: Why not inheritance?"))),"  "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("font",{size:"4"},"Answer:"))),"  The old solution back in the day, when Object Oriented was a huge hype, was with inheritance.",(0,r.kt)("br",{parentName:"p"}),"\n","What is inheritance in a nutshell?",(0,r.kt)("br",{parentName:"p"}),"\n","Consider a Duck class. The Duck class is a super class. The intention is that other classes should inherit from it. Duck has 3 methods on it:  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"quack"),(0,r.kt)("li",{parentName:"ul"},"display"),(0,r.kt)("li",{parentName:"ul"},"fly  ")),(0,r.kt)("p",null,"Let's now consider 2 sub-classes: WildDuck & CityDuck.",(0,r.kt)("br",{parentName:"p"}),"\n","In UML, we have 2 types of arrows:",(0,r.kt)("br",{parentName:"p"}),"\n","is-a === ---D  (this is an inheritance arrow)",(0,r.kt)("br",{parentName:"p"}),"\n","has-a === ---\x3e   (this is a composition arrow)",(0,r.kt)("br",{parentName:"p"}),"\n",'In other words: "A wild duck IS a Duck". "A city duck IS a Duck".',(0,r.kt)("br",{parentName:"p"}),"\n",'The sub-classes of Duck are in charge of implementing their own version of the "display" method. And thus, wild ducks can be displayed differently than city ducks.'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("font",{size:"6"},"The problems with inheritance")),"  "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("font",{size:"5"},(0,r.kt)("em",{parentName:"strong"},"-- Downside 1: Not Resilient to Change"))),(0,r.kt)("br",{parentName:"p"}),"\n",'The main problem with it is that sub-classes must inherit ALL of the methods of the parent class, even when it\'s not logical.\nWe said that Duck has a "fly" method.\nNow consider a new sub-class which is called RubberDuck.\nRubber ducks can\'t fly, but CityDuck & WildDuck can.\nIf we were to put the "fly" method on Duck, then RubberDuck would have to inherit it, and implement it. Even if it\'s not logical.\nSo yeah, we could think about this things ahead of time, and design properly, but consider a case where this "fly" method is some change that was offered by our product team later on.\nThis change would break our entire code structure of how we think about Duck.\nSo we are already seeing that inheritance isn\'t great with changes.\nThere IS an ugly solution for this is to force RubberDuck to also implement the "fly" method, and just have it do nothing.'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("font",{size:"5"},(0,r.kt)("em",{parentName:"strong"},"-- Downside 2: Code duplication"))),"  "),(0,r.kt)("p",null,"Horizontal inheritance is not possible. Consider a case where we add 2 new sub-classes (to the already existing sub-classes!): DuckA & DuckB",(0,r.kt)("br",{parentName:"p"}),"\n",'Where they both have a "fly" method, which is exactly the same implementation! The "fly" over at Duck is really just the basic definition, so it can\'t be positioned there. We would need to duplicate the code twice on each of the two classes.',(0,r.kt)("br",{parentName:"p"}),"\n","The ugly, and extremely not feasible solution to this is, we can say that those two classes inherit from let's say a class called FlyingWithTypeA, but you can already see that it's starting to get ",(0,r.kt)("font",{size:"5"},(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"really")))," complicated.",(0,r.kt)("br",{parentName:"p"}),"\n",'Because consider a case where DuckA & DuckB both has an "eat" method, which are different in implementation, but then DuckB and DuckC has the same "eat" implementation.',(0,r.kt)("br",{parentName:"p"}),"\n","So the problem is, if you image a tree structure, is that inheritance can only be shared downstream the tree. It cannot be shared horizontally.",(0,r.kt)("br",{parentName:"p"}),"\n","That's why composition is often favored over inheritance."),(0,r.kt)("h3",{id:"--d-the-solution-composition"},"- D. The Solution: Composition"),(0,r.kt)("p",null,"After reading the problems with inheritance, let's now think about the definition of the Strategy Pattern again:",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("em",{parentName:"p"},'"The Strategy Pattern defines a family of algorithms, encapsulate each one, and makes them interchangeable. Strategy lets the algorithm vary independently from the clients that use it".'),(0,r.kt)("br",{parentName:"p"}),"\n","That's exactly our problem here!",(0,r.kt)("br",{parentName:"p"}),"\n",'We have an algorithm for "quacking", we have an algorithm for "flying", and what we\'re realizing is that we can\'t create a hierarchical solution in order to share code between these different uses of the different algorithms. so we have to extract the algorithms, and say that each sub-class is actually a "client". A WildDuck is a client. A CityDuck is a client. and they all make use of different algorithms for flying, and quacking, etc.',(0,r.kt)("br",{parentName:"p"}),"\n",'And these methods can vary independently from other aspects of the clients.\nSo what do we do? We create "strategies" for quacking, and "strategies" for flying.\nSo we\'ll create Interfaces. For example: IQuackBehavior.',(0,r.kt)("br",{parentName:"p"}),"\n",'And what it does is it says - you need to have a "quack" method.',(0,r.kt)("br",{parentName:"p"}),"\n","*** Note: there are many ways of approaching this problem that still adhere to the Strategy Pattern, this is just one of them.",(0,r.kt)("br",{parentName:"p"}),"\n",'And then we do the same for "flying".',(0,r.kt)("br",{parentName:"p"}),"\n",'We\'ll create an interfaces IFlyBehavior, that says you need to have a "fly" method.',(0,r.kt)("br",{parentName:"p"}),"\n",'Notice the conceptual change, that now we\'re using a "has-a" relation, instead of a "is-a" relation.',(0,r.kt)("br",{parentName:"p"}),"\n",'Now let\'s consider CityDuck and WildDuck as 2 Clients that should have the a "quack" method, wether it be the same or different.',(0,r.kt)("br",{parentName:"p"}),"\n","How would we achieve that?",(0,r.kt)("br",{parentName:"p"}),"\n","We said that we have an IQuackBehavior interface.",(0,r.kt)("br",{parentName:"p"}),"\n","An interface is not instantiate-able, it needs to have a concretion.",(0,r.kt)("br",{parentName:"p"}),"\n","So we need to create a concretion called SimpleQuackStrategy.",(0,r.kt)("br",{parentName:"p"}),"\n","Now, if those two ducks are the same, they would use that same concretion, and if they're not, we would simply create another concretion, and give it a proper meaningful name.  "),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},'The Term "Delegation"')),(0,r.kt)("br",{parentName:"p"}),"\n",'In inheritance, the abstract class Duck had a "quack" method on it.',(0,r.kt)("br",{parentName:"p"}),"\n",'With the Strategy Pattern, the "quack" method delegates to the quack behavior to its concretion. So actually, when we run "quack", we would in fact run the "quack" method on SimpleQuackStrategy.',(0,r.kt)("br",{parentName:"p"}),"\n","This is now possible if my Duck has-an IQuackBehavior, which is concreted through SimpleQuackStrategy.  "),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"Why use an interface? Why not just use SimpleQuackStrategy?")),(0,r.kt)("br",{parentName:"p"}),"\n",'Consider a case where Duck points directly to SimpleQuackStrategy, instead of going through IQuackBehavior. Basically just saying "A Duck has-a SimpleQuackBehavior.',(0,r.kt)("br",{parentName:"p"}),"\n","This is a problem, and is really bad, because it is significantly less flexible! This creates class explosions.",(0,r.kt)("br",{parentName:"p"}),"\n",'All we need is to know that it is "quackable", so maybe we\'ll call the interface IQuackable.  '),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"How would the composition work?")),(0,r.kt)("br",{parentName:"p"}),"\n",'With the RubberDuck case we could create a concretion called NoQuack for the "quack" method.',(0,r.kt)("br",{parentName:"p"}),"\n","With the DuckA & DuckB case, each of them would use any concretion that it wants, whether it is for IFlyBehavior, or IEatBehavior.",(0,r.kt)("br",{parentName:"p"}),"\n",'Basically what we\'re doing now is we\'re taking the "fly" method from the WildDuck class, and placing it in a concretion outside, as if WildDuck client delegates the "fly" ability over to the concretion.  '),(0,r.kt)("h3",{id:"--e-dependency-injection"},"- E. Dependency Injection"),(0,r.kt)("p",null,"What we haven't talked about is Dependency Injection.",(0,r.kt)("br",{parentName:"p"}),"\n","We sort of glanced over this.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"Dependency Injection")," is only possible IF these behaviors are somehow injected into an instance of a duck, and not hardcoded in the class. if the class hardcodes these things, then we can't do that anymore.",(0,r.kt)("br",{parentName:"p"}),"\n","To make this perfectly clear:  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// *** THIS IS BAD ***\n\nclass Duck {\n  IFlyBehavior fb = new SomeParticularFlyBehavior();\n  IQuackBehavior qb;\n  IDisplayBehavior db;\n}\n")),(0,r.kt)("p",null,"If we did this, if we were to hardcode the dependency, it wouldn't be as flexible. It would put me back in a state where I need multiple classes to represent all of these different types of Ducks. Think about it, it is significantly less composable.",(0,r.kt)("br",{parentName:"p"}),"\n","We need to somehow inject the behavior.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// *** THIS IS GOOD ***\n\nclass Duck {\n  IFlyBehavior fb;\n  IQuackBehavior qb;\n  IDisplayBehavior db;\n\n  constructor({ fb, qb, db }){\n    this.fb = fb;\n    this.qb = qb;\n    this.db = db;\n  }\n}\n")),(0,r.kt)("p",null,"The key here is to use the constructor injection.",(0,r.kt)("br",{parentName:"p"}),"\n",'And now think about how the "fly" method on that class would look like:  '),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"public void fly(){\n  this.fb.fly()\n}\n")),(0,r.kt)("p",null,"So you pass in the behavior, and then you execute that behavior within the class."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"2-observer-pattern"},"2. Observer Pattern"),(0,r.kt)("h3",{id:"--a-definition"},"- A. Definition"),(0,r.kt)("p",null,"The Observer Pattern defines a one-to-many dependency between objects so that when one object changes state, all of its dependencies are notified, and are updated automatically."),(0,r.kt)("p",null,"The Observer Pattern introduces a few new terms:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Observer"),(0,r.kt)("li",{parentName:"ul"},"Observable"),(0,r.kt)("li",{parentName:"ul"},"Register"),(0,r.kt)("li",{parentName:"ul"},"Push V.S. Poll")),(0,r.kt)("p",null,"In the Observer Pattern, we have 2 objects.",(0,r.kt)("br",{parentName:"p"}),"\n","One object is the Observable.",(0,r.kt)("br",{parentName:"p"}),"\n","The Observable is simply an object with a state, and its state changes changes over time.",(0,r.kt)("br",{parentName:"p"}),"\n","The Observer is just an object that needs/wants to know, for some reason, when the state of the first object, the Observable, has changed.",(0,r.kt)("br",{parentName:"p"}),"\n","So we have a relationship between an Observable & an Observer.  "),(0,r.kt)("h3",{id:"--b-push-vs-pull"},"- B. Push v.s. Pull"),(0,r.kt)("p",null,"The Observer Pattern is essentially about going from a Polling architecture to a Push architecture.",(0,r.kt)("br",{parentName:"p"}),"\n","Now these terms are usually more used in terms of networking architectures, and web service, and etc. This is just an analogy.  "),(0,r.kt)("h3",{id:"--c-the-pull-method"},"- C. The Pull Method"),(0,r.kt)("p",null,'The Observer want to know about the state of the Observable.\nSo what can it do? We could have the Observer ask the Observable "Hey, did you change state?" over and over again, at fixed intervals, and it would have to do that indefinitely.',(0,r.kt)("br",{parentName:"p"}),"\n","But how will we choose what this fixed interval be?",(0,r.kt)("br",{parentName:"p"}),"\n","A second?",(0,r.kt)("br",{parentName:"p"}),"\n","A half a second?",(0,r.kt)("br",{parentName:"p"}),"\n","A long fixed period of time could potentially create a huge delay in response.",(0,r.kt)("br",{parentName:"p"}),"\n","And if we were to choose an extremely short period of time, let's say 1 millisecond, it would solve the delay issue, but would cause another major issue of overloading on the system.",(0,r.kt)("br",{parentName:"p"}),"\n","And this is just talking about one Observer!",(0,r.kt)("br",{parentName:"p"}),"\n",'Consider a case where we have a hundred Observers. They would all want to know if the Observable state had changed, so they would all ask in polling "have you changed state?", and in the next millisecond they would all do the same again. The overload would be insane.',(0,r.kt)("br",{parentName:"p"}),"\n","The Observer Pattern helps us move from the polling onto pushing.",(0,r.kt)("br",{parentName:"p"}),"\n",'Instead of the observer constantly asking "has your state changed?", the first object is responsible for telling all of its subscribers, the observers which observe it, when it has changed.  '),(0,r.kt)("h3",{id:"--d-we-need-to-register"},"- D. We need to Register"),(0,r.kt)("p",null,"What we've seen up until now, in essence, this is the entire Observer Pattern. But! There's a problem now.",(0,r.kt)("br",{parentName:"p"}),"\n","How would the Observable, whose state has changed, know... who all of its subscribers are? in order to do all of the pushing?",(0,r.kt)("br",{parentName:"p"}),"\n","Somehow all of the subscribers need to register to the subject.",(0,r.kt)("br",{parentName:"p"}),"\n",'In many textbooks, and programming language, the Observable is often considered as "the subject".  '),(0,r.kt)("h3",{id:"--e-variations-of-the-observer-pattern"},"- E. Variations of the Observer Pattern"),(0,r.kt)("p",null,"Different programming languages have different default implementations of the Observer Pattern, and therefore different people draw different diagrams, because there are variations of Observer Pattern. Each of course has its advantages and disadvantages.",(0,r.kt)("br",{parentName:"p"}),"\n",'We will talk about the one found in the book of "Head First - Design Patterns", and then discuss what the benefits of the approach that they are suggesting. And then we would also look at a slight variation.  '),(0,r.kt)("p",null,"An IObservable has the following functions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"register(IObserver)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unregister(IObserver)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"notifyBroadcast()"))),(0,r.kt)("p",null,"An IObserver has the following function:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"update(changes)"))),(0,r.kt)("p",null,"So, basically, an Observable holds a list of all Observers that registered to it.",(0,r.kt)("br",{parentName:"p"}),"\n","New Observers can register to it, and existing Observers can unregister from it.",(0,r.kt)("br",{parentName:"p"}),"\n","Upon calling the Observable's notifyBroadcast, it goes over all Observers that are registered to it, and notifies them on the change.",(0,r.kt)("br",{parentName:"p"}),"\n","And how it does that?",(0,r.kt)("br",{parentName:"p"}),"\n","It simply calls their ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"update()"))," function.  "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},(0,r.kt)("font",{size:"6"},"Summary Example"))),"  "),(0,r.kt)("p",null,"A chat room is a good example for using the Observer Pattern.",(0,r.kt)("br",{parentName:"p"}),"\n","The Observer Pattern is a very suitable pattern for chat systems.",(0,r.kt)("br",{parentName:"p"}),"\n",'If you think about it, you have a Chat Room, which is an Observable, and then you add in Observers to the Chat Room. And then whenever a user broadcasts a message, or I should rather say "simply sends a message", the Observable calls the notify function, so that all of the clients that are connected to the Chat Room can get the latest message that has been sent, i.e. broadcasted by one of the users.'),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"999-bridge-pattern"},"999. Bridge Pattern"),(0,r.kt)("h3",{id:"a-what-is-the-goal-of-the-bridge-pattern"},"A. What is the Goal of the Bridge Pattern?"),(0,r.kt)("p",null,"The intent of the Bride Pattern is to decouple an abstraction from its implementation so that the two can vary independently.  "),(0,r.kt)("h3",{id:"b-the-interface-segregation-principle"},"B. The interface segregation principle"),(0,r.kt)("p",null,"The interface segregation principle states that clients should not be forced to depend on method that they do not use.",(0,r.kt)("br",{parentName:"p"}),"\n","For example, Book should no be forced to depend on the method getBio, just because Artist wants to have the method getBio. because books don't have biographies. Authors of books have biographies. So that might be a good reason for not mixing Artist & Book, and leave them as separate.  "),(0,r.kt)("p",null,"\u2022 Abstraction\n\u2022 Concrete Abstraction\n\u2022 Implementor\n\u2022 Concrete Implementor"),(0,r.kt)("p",null,"An abstraction has a single implementor.",(0,r.kt)("br",{parentName:"p"}),"\n","An abstraction is an abstract, so in order for it to be used, we need to use any of the concrete abstractions.",(0,r.kt)("br",{parentName:"p"}),"\n","The implementor too is an abstraction, so any concrete abstraction needs to have, a concrete implementor.  "),(0,r.kt)("p",null,"Example:",(0,r.kt)("br",{parentName:"p"}),"\n","Abstractions are Views.",(0,r.kt)("br",{parentName:"p"}),"\n","Implementors are Media Resources.",(0,r.kt)("br",{parentName:"p"}),"\n","Concrete Abstractions are: LongFormView, ShortFormView",(0,r.kt)("br",{parentName:"p"}),"\n","Concrete implementors are: Artist Resource, Book Resource.",(0,r.kt)("br",{parentName:"p"}),"\n",'A little bot of an "outside of scope" material, think about the Artist Resource... It could actually adapt over an Artist. which what i really meant is a concretion. so we might have a concretion called an Artist, and then the Artist Resource would have an Artist, and not have an abstraction that is shared amongst these resources. To continue this example, we might have another concretion called a Book, and then we\'d say the Book Resource has a Book. So the Artist Resource adapt over an Artist, and the Book Resource adapts over a Book. This is how we make the Artist Resource and the Book Resource behaviorally different. There is some behavior that is fundamentally different.',(0,r.kt)("br",{parentName:"p"}),"\n","In the same way, LongForm is fundamentally different from the Short Form. And it really is, except the methods."))}d.isMDXComponent=!0}}]);